// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_sliding_win_out (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        delayed_i_0_dout,
        delayed_i_0_empty_n,
        delayed_i_0_read,
        nodelay_i_0_dout,
        nodelay_i_0_empty_n,
        nodelay_i_0_read,
        delayed_i_1_dout,
        delayed_i_1_empty_n,
        delayed_i_1_read,
        nodelay_i_1_dout,
        nodelay_i_1_empty_n,
        nodelay_i_1_read,
        start_out,
        start_write,
        data2window_1_din,
        data2window_1_full_n,
        data2window_1_write,
        data2window_0_din,
        data2window_0_full_n,
        data2window_0_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] delayed_i_0_dout;
input   delayed_i_0_empty_n;
output   delayed_i_0_read;
input  [15:0] nodelay_i_0_dout;
input   nodelay_i_0_empty_n;
output   nodelay_i_0_read;
input  [15:0] delayed_i_1_dout;
input   delayed_i_1_empty_n;
output   delayed_i_1_read;
input  [15:0] nodelay_i_1_dout;
input   nodelay_i_1_empty_n;
output   nodelay_i_1_read;
output   start_out;
output   start_write;
output  [15:0] data2window_1_din;
input   data2window_1_full_n;
output   data2window_1_write;
output  [15:0] data2window_0_din;
input   data2window_0_full_n;
output   data2window_0_write;

reg ap_done;
reg ap_idle;
reg delayed_i_0_read;
reg nodelay_i_0_read;
reg delayed_i_1_read;
reg nodelay_i_1_read;
reg start_write;
reg data2window_1_write;
reg data2window_0_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] icmp_ln84_fu_253_p2;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] tmp_reg_258;
reg   [0:0] tmp_2_reg_262;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    data2window_1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    delayed_i_1_blk_n;
wire    ap_block_pp0_stage1;
reg    data2window_0_blk_n;
reg    delayed_i_0_blk_n;
reg    nodelay_i_0_blk_n;
reg    nodelay_i_1_blk_n;
reg   [9:0] i2_0_i_01_reg_187;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln84_fu_241_p2;
reg   [10:0] add_ln84_reg_266;
wire   [9:0] empty_fu_247_p1;
reg   [9:0] empty_reg_271;
reg   [0:0] icmp_ln84_reg_296;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage0_subdone;
reg   [9:0] ap_phi_mux_i2_0_i_01_phi_fu_191_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201;
reg   [15:0] ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201;
wire   [15:0] ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211;
reg   [15:0] ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] i2_0_i_01_cast_fu_221_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_114;
reg    ap_condition_85;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln84_reg_296 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_reg_258 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= nodelay_i_0_dout;
        end else if ((tmp_reg_258 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= delayed_i_0_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((tmp_2_reg_262 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= nodelay_i_1_dout;
        end else if ((tmp_2_reg_262 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= delayed_i_1_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i2_0_i_01_reg_187 <= empty_reg_271;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln84_reg_296 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        i2_0_i_01_reg_187 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln84_reg_266 <= add_ln84_fu_241_p2;
        tmp_2_reg_262 <= ap_phi_mux_i2_0_i_01_phi_fu_191_p6[32'd9];
        tmp_reg_258 <= ap_phi_mux_i2_0_i_01_phi_fu_191_p6[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_271 <= empty_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln84_reg_296 <= icmp_ln84_fu_253_p2;
    end
end

always @ (*) begin
    if (((icmp_ln84_reg_296 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = real_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_114)) begin
        if ((icmp_ln84_reg_296 == 1'd1)) begin
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = 10'd0;
        end else if ((icmp_ln84_reg_296 == 1'd0)) begin
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = empty_reg_271;
        end else begin
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = i2_0_i_01_reg_187;
        end
    end else begin
        ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = i2_0_i_01_reg_187;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data2window_0_blk_n = data2window_0_full_n;
    end else begin
        data2window_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data2window_0_write = 1'b1;
    end else begin
        data2window_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data2window_1_blk_n = data2window_1_full_n;
    end else begin
        data2window_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data2window_1_write = 1'b1;
    end else begin
        data2window_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_258 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        delayed_i_0_blk_n = delayed_i_0_empty_n;
    end else begin
        delayed_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_258 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        delayed_i_0_read = 1'b1;
    end else begin
        delayed_i_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_262 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        delayed_i_1_blk_n = delayed_i_1_empty_n;
    end else begin
        delayed_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_262 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        delayed_i_1_read = 1'b1;
    end else begin
        delayed_i_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln84_fu_253_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_258 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        nodelay_i_0_blk_n = nodelay_i_0_empty_n;
    end else begin
        nodelay_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_258 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        nodelay_i_0_read = 1'b1;
    end else begin
        nodelay_i_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_262 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        nodelay_i_1_blk_n = nodelay_i_1_empty_n;
    end else begin
        nodelay_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_262 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        nodelay_i_1_read = 1'b1;
    end else begin
        nodelay_i_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_fu_241_p2 = (11'd2 + i2_0_i_01_cast_fu_221_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((data2window_1_full_n == 1'b0) | (data2window_0_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((data2window_1_full_n == 1'b0) | (data2window_0_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((data2window_1_full_n == 1'b0) | (data2window_0_full_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((tmp_2_reg_262 == 1'd1) & (nodelay_i_1_empty_n == 1'b0)) | ((tmp_2_reg_262 == 1'd0) & (delayed_i_1_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd1) & (nodelay_i_0_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd0) & (delayed_i_0_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((tmp_2_reg_262 == 1'd1) & (nodelay_i_1_empty_n == 1'b0)) | ((tmp_2_reg_262 == 1'd0) & (delayed_i_1_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd1) & (nodelay_i_0_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd0) & (delayed_i_0_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((data2window_1_full_n == 1'b0) | (data2window_0_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = (((tmp_2_reg_262 == 1'd1) & (nodelay_i_1_empty_n == 1'b0)) | ((tmp_2_reg_262 == 1'd0) & (delayed_i_1_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd1) & (nodelay_i_0_empty_n == 1'b0)) | ((tmp_reg_258 == 1'd0) & (delayed_i_0_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_114 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_85 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201 = 'bx;

assign ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211 = 'bx;

assign ap_ready = internal_ap_ready;

assign data2window_0_din = ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201;

assign data2window_1_din = ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211;

assign empty_fu_247_p1 = add_ln84_fu_241_p2[9:0];

assign i2_0_i_01_cast_fu_221_p1 = ap_phi_mux_i2_0_i_01_phi_fu_191_p6;

assign icmp_ln84_fu_253_p2 = ((add_ln84_reg_266 == 11'd1024) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //Loop_sliding_win_out
