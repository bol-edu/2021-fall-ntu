// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_sliding_win_del (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        din_V_V_TVALID,
        nodelay_i_0_din,
        nodelay_i_0_full_n,
        nodelay_i_0_write,
        nodelay_i_1_din,
        nodelay_i_1_full_n,
        nodelay_i_1_write,
        delayed_i_0_din,
        delayed_i_0_full_n,
        delayed_i_0_write,
        delayed_i_1_din,
        delayed_i_1_full_n,
        delayed_i_1_write,
        start_out,
        start_write,
        din_V_V_TDATA,
        din_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   din_V_V_TVALID;
output  [15:0] nodelay_i_0_din;
input   nodelay_i_0_full_n;
output   nodelay_i_0_write;
output  [15:0] nodelay_i_1_din;
input   nodelay_i_1_full_n;
output   nodelay_i_1_write;
output  [15:0] delayed_i_0_din;
input   delayed_i_0_full_n;
output   delayed_i_0_write;
output  [15:0] delayed_i_1_din;
input   delayed_i_1_full_n;
output   delayed_i_1_write;
output   start_out;
output   start_write;
input  [15:0] din_V_V_TDATA;
output   din_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg nodelay_i_0_write;
reg nodelay_i_1_write;
reg delayed_i_0_write;
reg delayed_i_1_write;
reg start_write;
reg din_V_V_TREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] icmp_ln76_fu_186_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
reg   [0:0] trunc_ln203_reg_212;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    delay_line_Array_V_ce0;
reg    delay_line_Array_V_we0;
wire   [15:0] delay_line_Array_V_q0;
reg    delayed_i_0_blk_n;
wire    ap_block_pp0_stage0;
reg    delayed_i_1_blk_n;
reg    din_V_V_TDATA_blk_n;
reg    nodelay_i_0_blk_n;
reg    nodelay_i_1_blk_n;
reg   [8:0] i_0_i5_reg_162;
reg   [15:0] din_val_V_reg_205;
wire   [0:0] trunc_ln203_fu_176_p1;
wire   [8:0] i_fu_180_p2;
reg   [8:0] i_reg_216;
reg   [0:0] icmp_ln76_reg_221;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] ap_phi_mux_i_0_i5_phi_fu_166_p6;
reg    ap_block_pp0_stage0_01001;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_din_V_V_U_apdone_blk;
wire   [15:0] din_V_V_TDATA_int;
wire    din_V_V_TVALID_int;
reg    din_V_V_TREADY_int;
wire    regslice_both_din_V_V_U_ack_in;
reg    ap_condition_113;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Loop_sliding_win_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
delay_line_Array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(9'd511),
    .ce0(delay_line_Array_V_ce0),
    .we0(delay_line_Array_V_we0),
    .d0(din_val_V_reg_205),
    .q0(delay_line_Array_V_q0)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_din_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(din_V_V_TDATA),
    .vld_in(din_V_V_TVALID),
    .ack_in(regslice_both_din_V_V_U_ack_in),
    .data_out(din_V_V_TDATA_int),
    .vld_out(din_V_V_TVALID_int),
    .ack_out(din_V_V_TREADY_int),
    .apdone_blk(regslice_both_din_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_221 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_221 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i5_reg_162 <= i_reg_216;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_221 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_0_i5_reg_162 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_val_V_reg_205 <= din_V_V_TDATA_int;
        icmp_ln76_reg_221 <= icmp_ln76_fu_186_p2;
        trunc_ln203_reg_212 <= trunc_ln203_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_216 <= i_fu_180_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_221 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_113)) begin
        if ((icmp_ln76_reg_221 == 1'd1)) begin
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = 9'd0;
        end else if ((icmp_ln76_reg_221 == 1'd0)) begin
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_reg_216;
        end else begin
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_0_i5_reg_162;
        end
    end else begin
        ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_0_i5_reg_162;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Array_V_ce0 = 1'd1;
    end else begin
        delay_line_Array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Array_V_we0 = 1'd1;
    end else begin
        delay_line_Array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        delayed_i_0_blk_n = delayed_i_0_full_n;
    end else begin
        delayed_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln203_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_i_0_write = 1'b1;
    end else begin
        delayed_i_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_212 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        delayed_i_1_blk_n = delayed_i_1_full_n;
    end else begin
        delayed_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln203_reg_212 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_i_1_write = 1'b1;
    end else begin
        delayed_i_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        din_V_V_TDATA_blk_n = din_V_V_TVALID_int;
    end else begin
        din_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((din_V_V_TVALID == 1'b1) & (regslice_both_din_V_V_U_ack_in == 1'b1))) begin
        din_V_V_TREADY = 1'b1;
    end else begin
        din_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_V_V_TREADY_int = 1'b1;
    end else begin
        din_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_fu_186_p2 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        nodelay_i_0_blk_n = nodelay_i_0_full_n;
    end else begin
        nodelay_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln203_reg_212 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_i_0_write = 1'b1;
    end else begin
        nodelay_i_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_212 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        nodelay_i_1_blk_n = nodelay_i_1_full_n;
    end else begin
        nodelay_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln203_reg_212 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_i_1_write = 1'b1;
    end else begin
        nodelay_i_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((trunc_ln203_reg_212 == 1'd1) & (delayed_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd1) & (nodelay_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (delayed_i_0_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (nodelay_i_0_full_n == 1'b0)))) | ((din_V_V_TVALID_int == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((trunc_ln203_reg_212 == 1'd1) & (delayed_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd1) & (nodelay_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (delayed_i_0_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (nodelay_i_0_full_n == 1'b0)))) | ((din_V_V_TVALID_int == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((trunc_ln203_reg_212 == 1'd1) & (delayed_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd1) & (nodelay_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (delayed_i_0_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (nodelay_i_0_full_n == 1'b0)))) | ((din_V_V_TVALID_int == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (din_V_V_TVALID_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((trunc_ln203_reg_212 == 1'd1) & (delayed_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd1) & (nodelay_i_1_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (delayed_i_0_full_n == 1'b0)) | ((trunc_ln203_reg_212 == 1'd0) & (nodelay_i_0_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_113 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign delayed_i_0_din = delay_line_Array_V_q0;

assign delayed_i_1_din = delay_line_Array_V_q0;

assign i_fu_180_p2 = (9'd1 + ap_phi_mux_i_0_i5_phi_fu_166_p6);

assign icmp_ln76_fu_186_p2 = ((ap_phi_mux_i_0_i5_phi_fu_166_p6 == 9'd511) ? 1'b1 : 1'b0);

assign nodelay_i_0_din = din_val_V_reg_205;

assign nodelay_i_1_din = din_val_V_reg_205;

assign start_out = real_start;

assign trunc_ln203_fu_176_p1 = ap_phi_mux_i_0_i5_phi_fu_166_p6[0:0];

endmodule //Loop_sliding_win_del
