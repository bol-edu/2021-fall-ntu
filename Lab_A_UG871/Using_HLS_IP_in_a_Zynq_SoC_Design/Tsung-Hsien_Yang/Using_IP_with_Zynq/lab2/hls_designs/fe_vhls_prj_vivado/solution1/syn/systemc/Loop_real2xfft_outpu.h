// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_real2xfft_outpu_HH_
#define _Loop_real2xfft_outpu_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_real2xfft_outpu : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > windowed_0_dout;
    sc_in< sc_logic > windowed_0_empty_n;
    sc_out< sc_logic > windowed_0_read;
    sc_in< sc_lv<16> > windowed_1_dout;
    sc_in< sc_logic > windowed_1_empty_n;
    sc_out< sc_logic > windowed_1_read;
    sc_in< sc_logic > dout_TREADY;
    sc_out< sc_lv<32> > dout_TDATA;
    sc_out< sc_logic > dout_TVALID;
    sc_out< sc_lv<1> > dout_TLAST;


    // Module declarations
    Loop_real2xfft_outpu(sc_module_name name);
    SC_HAS_PROCESS(Loop_real2xfft_outpu);

    ~Loop_real2xfft_outpu();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_dout_V_data_U;
    regslice_both<1>* regslice_both_dout_V_last_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_168_p3;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > regslice_both_dout_V_data_U_apdone_blk;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > windowed_0_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > windowed_1_blk_n;
    sc_signal< sc_logic > dout_TDATA_blk_n;
    sc_signal< sc_lv<10> > i_01_reg_124;
    sc_signal< sc_lv<10> > trunc_ln77_fu_164_p1;
    sc_signal< sc_lv<10> > trunc_ln77_reg_188;
    sc_signal< sc_lv<1> > tmp_reg_193;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<10> > ap_phi_mux_i_01_phi_fu_128_p6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<11> > i_01_cast_fu_138_p1;
    sc_signal< sc_lv<11> > i_fu_158_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > dout_TDATA_int;
    sc_signal< sc_logic > dout_TVALID_int;
    sc_signal< sc_logic > dout_TREADY_int;
    sc_signal< sc_logic > regslice_both_dout_V_data_U_vld_out;
    sc_signal< sc_logic > regslice_both_dout_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > dout_TLAST_int;
    sc_signal< sc_logic > regslice_both_dout_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_dout_V_last_V_U_vld_out;
    sc_signal< bool > ap_condition_78;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_3FE;
    static const sc_lv<11> ap_const_lv11_2;
    static const sc_lv<32> ap_const_lv32_A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_78();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_i_01_phi_fu_128_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_dout_TDATA_blk_n();
    void thread_dout_TDATA_int();
    void thread_dout_TLAST_int();
    void thread_dout_TVALID();
    void thread_dout_TVALID_int();
    void thread_i_01_cast_fu_138_p1();
    void thread_i_fu_158_p2();
    void thread_tmp_fu_168_p3();
    void thread_trunc_ln77_fu_164_p1();
    void thread_windowed_0_blk_n();
    void thread_windowed_0_read();
    void thread_windowed_1_blk_n();
    void thread_windowed_1_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
