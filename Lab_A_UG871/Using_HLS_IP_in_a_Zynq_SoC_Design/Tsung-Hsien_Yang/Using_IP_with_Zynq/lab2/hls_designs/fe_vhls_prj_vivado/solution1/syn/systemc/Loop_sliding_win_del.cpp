// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_sliding_win_del.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_sliding_win_del::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_sliding_win_del::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Loop_sliding_win_del::ap_ST_fsm_state1 = "1";
const sc_lv<2> Loop_sliding_win_del::ap_ST_fsm_pp0_stage0 = "10";
const bool Loop_sliding_win_del::ap_const_boolean_1 = true;
const sc_lv<32> Loop_sliding_win_del::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_sliding_win_del::ap_const_lv1_1 = "1";
const sc_lv<32> Loop_sliding_win_del::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_sliding_win_del::ap_const_lv1_0 = "0";
const bool Loop_sliding_win_del::ap_const_boolean_0 = false;
const sc_lv<9> Loop_sliding_win_del::ap_const_lv9_0 = "000000000";
const sc_lv<9> Loop_sliding_win_del::ap_const_lv9_1FF = "111111111";
const sc_lv<9> Loop_sliding_win_del::ap_const_lv9_1 = "1";

Loop_sliding_win_del::Loop_sliding_win_del(sc_module_name name) : sc_module(name), mVcdFile(0) {
    delay_line_Array_V_U = new Loop_sliding_win_bkb("delay_line_Array_V_U");
    delay_line_Array_V_U->clk(ap_clk);
    delay_line_Array_V_U->reset(ap_rst);
    delay_line_Array_V_U->address0(ap_var_for_const0);
    delay_line_Array_V_U->ce0(delay_line_Array_V_ce0);
    delay_line_Array_V_U->we0(delay_line_Array_V_we0);
    delay_line_Array_V_U->d0(din_val_V_reg_205);
    delay_line_Array_V_U->q0(delay_line_Array_V_q0);
    regslice_both_din_V_V_U = new regslice_both<16>("regslice_both_din_V_V_U");
    regslice_both_din_V_V_U->ap_clk(ap_clk);
    regslice_both_din_V_V_U->ap_rst(ap_rst);
    regslice_both_din_V_V_U->data_in(din_V_V_TDATA);
    regslice_both_din_V_V_U->vld_in(din_V_V_TVALID);
    regslice_both_din_V_V_U->ack_in(regslice_both_din_V_V_U_ack_in);
    regslice_both_din_V_V_U->data_out(din_V_V_TDATA_int);
    regslice_both_din_V_V_U->vld_out(din_V_V_TVALID_int);
    regslice_both_din_V_V_U->ack_out(din_V_V_TREADY_int);
    regslice_both_din_V_V_U->apdone_blk(regslice_both_din_V_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( nodelay_i_0_full_n );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( nodelay_i_1_full_n );
    sensitive << ( delayed_i_0_full_n );
    sensitive << ( delayed_i_1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( din_V_V_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( nodelay_i_0_full_n );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( nodelay_i_1_full_n );
    sensitive << ( delayed_i_0_full_n );
    sensitive << ( delayed_i_1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( din_V_V_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( nodelay_i_0_full_n );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( nodelay_i_1_full_n );
    sensitive << ( delayed_i_0_full_n );
    sensitive << ( delayed_i_1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( din_V_V_TVALID_int );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( din_V_V_TVALID_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( nodelay_i_0_full_n );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( nodelay_i_1_full_n );
    sensitive << ( delayed_i_0_full_n );
    sensitive << ( delayed_i_1_full_n );

    SC_METHOD(thread_ap_condition_113);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln76_reg_221 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_0_i5_phi_fu_166_p6);
    sensitive << ( i_0_i5_reg_162 );
    sensitive << ( i_reg_216 );
    sensitive << ( icmp_ln76_reg_221 );
    sensitive << ( ap_condition_113 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_delay_line_Array_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_delay_line_Array_V_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_delayed_i_0_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( delayed_i_0_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_delayed_i_0_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( delay_line_Array_V_q0 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_delayed_i_0_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_delayed_i_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( delayed_i_1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_delayed_i_1_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( delay_line_Array_V_q0 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_delayed_i_1_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_din_V_V_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( din_V_V_TVALID_int );

    SC_METHOD(thread_din_V_V_TREADY);
    sensitive << ( din_V_V_TVALID );
    sensitive << ( regslice_both_din_V_V_U_ack_in );

    SC_METHOD(thread_din_V_V_TREADY_int);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_fu_180_p2);
    sensitive << ( ap_phi_mux_i_0_i5_phi_fu_166_p6 );

    SC_METHOD(thread_icmp_ln76_fu_186_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_0_i5_phi_fu_166_p6 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( icmp_ln76_fu_186_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nodelay_i_0_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( nodelay_i_0_full_n );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_nodelay_i_0_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( din_val_V_reg_205 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_nodelay_i_0_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nodelay_i_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( nodelay_i_1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_nodelay_i_1_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( din_val_V_reg_205 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_nodelay_i_1_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( trunc_ln203_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_trunc_ln203_fu_176_p1);
    sensitive << ( ap_phi_mux_i_0_i5_phi_fu_166_p6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_ap_var_for_const0);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_sliding_win_del_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_V_V_TVALID, "(port)din_V_V_TVALID");
    sc_trace(mVcdFile, nodelay_i_0_din, "(port)nodelay_i_0_din");
    sc_trace(mVcdFile, nodelay_i_0_full_n, "(port)nodelay_i_0_full_n");
    sc_trace(mVcdFile, nodelay_i_0_write, "(port)nodelay_i_0_write");
    sc_trace(mVcdFile, nodelay_i_1_din, "(port)nodelay_i_1_din");
    sc_trace(mVcdFile, nodelay_i_1_full_n, "(port)nodelay_i_1_full_n");
    sc_trace(mVcdFile, nodelay_i_1_write, "(port)nodelay_i_1_write");
    sc_trace(mVcdFile, delayed_i_0_din, "(port)delayed_i_0_din");
    sc_trace(mVcdFile, delayed_i_0_full_n, "(port)delayed_i_0_full_n");
    sc_trace(mVcdFile, delayed_i_0_write, "(port)delayed_i_0_write");
    sc_trace(mVcdFile, delayed_i_1_din, "(port)delayed_i_1_din");
    sc_trace(mVcdFile, delayed_i_1_full_n, "(port)delayed_i_1_full_n");
    sc_trace(mVcdFile, delayed_i_1_write, "(port)delayed_i_1_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, din_V_V_TDATA, "(port)din_V_V_TDATA");
    sc_trace(mVcdFile, din_V_V_TREADY, "(port)din_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, icmp_ln76_fu_186_p2, "icmp_ln76_fu_186_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, trunc_ln203_reg_212, "trunc_ln203_reg_212");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, delay_line_Array_V_ce0, "delay_line_Array_V_ce0");
    sc_trace(mVcdFile, delay_line_Array_V_we0, "delay_line_Array_V_we0");
    sc_trace(mVcdFile, delay_line_Array_V_q0, "delay_line_Array_V_q0");
    sc_trace(mVcdFile, delayed_i_0_blk_n, "delayed_i_0_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, delayed_i_1_blk_n, "delayed_i_1_blk_n");
    sc_trace(mVcdFile, din_V_V_TDATA_blk_n, "din_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, nodelay_i_0_blk_n, "nodelay_i_0_blk_n");
    sc_trace(mVcdFile, nodelay_i_1_blk_n, "nodelay_i_1_blk_n");
    sc_trace(mVcdFile, i_0_i5_reg_162, "i_0_i5_reg_162");
    sc_trace(mVcdFile, din_val_V_reg_205, "din_val_V_reg_205");
    sc_trace(mVcdFile, trunc_ln203_fu_176_p1, "trunc_ln203_fu_176_p1");
    sc_trace(mVcdFile, i_fu_180_p2, "i_fu_180_p2");
    sc_trace(mVcdFile, i_reg_216, "i_reg_216");
    sc_trace(mVcdFile, icmp_ln76_reg_221, "icmp_ln76_reg_221");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i_0_i5_phi_fu_166_p6, "ap_phi_mux_i_0_i5_phi_fu_166_p6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_din_V_V_U_apdone_blk, "regslice_both_din_V_V_U_apdone_blk");
    sc_trace(mVcdFile, din_V_V_TDATA_int, "din_V_V_TDATA_int");
    sc_trace(mVcdFile, din_V_V_TVALID_int, "din_V_V_TVALID_int");
    sc_trace(mVcdFile, din_V_V_TREADY_int, "din_V_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_din_V_V_U_ack_in, "regslice_both_din_V_V_U_ack_in");
    sc_trace(mVcdFile, ap_condition_113, "ap_condition_113");
#endif

    }
}

Loop_sliding_win_del::~Loop_sliding_win_del() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete delay_line_Array_V_U;
    delete regslice_both_din_V_V_U;
}

void Loop_sliding_win_del::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv9_1FF;
}

void Loop_sliding_win_del::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln76_reg_221.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_221.read()))) {
        i_0_i5_reg_162 = i_reg_216.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln76_reg_221.read())))) {
        i_0_i5_reg_162 = ap_const_lv9_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        din_val_V_reg_205 = din_V_V_TDATA_int.read();
        icmp_ln76_reg_221 = icmp_ln76_fu_186_p2.read();
        trunc_ln203_reg_212 = trunc_ln203_fu_176_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_216 = i_fu_180_p2.read();
    }
}

void Loop_sliding_win_del::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Loop_sliding_win_del::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_sliding_win_del::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_sliding_win_del::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((((esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_full_n.read()) && 
    esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read())) || 
   (esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_full_n.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, din_V_V_TVALID_int.read())));
}

void Loop_sliding_win_del::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((((esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_full_n.read()) && 
    esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read())) || 
   (esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_full_n.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, din_V_V_TVALID_int.read())));
}

void Loop_sliding_win_del::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((((esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_full_n.read()) && 
    esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read())) || 
   (esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_full_n.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, din_V_V_TVALID_int.read())));
}

void Loop_sliding_win_del::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_sliding_win_del::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, din_V_V_TVALID_int.read());
}

void Loop_sliding_win_del::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_full_n.read()) && 
  esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read())) || (esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_full_n.read())));
}

void Loop_sliding_win_del::thread_ap_condition_113() {
    ap_condition_113 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void Loop_sliding_win_del::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln76_reg_221.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_sliding_win_del::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_sliding_win_del::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void Loop_sliding_win_del::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_ap_phi_mux_i_0_i5_phi_fu_166_p6() {
    if (esl_seteq<1,1,1>(ap_condition_113.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln76_reg_221.read())) {
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = ap_const_lv9_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_221.read())) {
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_reg_216.read();
        } else {
            ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_0_i5_reg_162.read();
        }
    } else {
        ap_phi_mux_i_0_i5_phi_fu_166_p6 = i_0_i5_reg_162.read();
    }
}

void Loop_sliding_win_del::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Loop_sliding_win_del::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_delay_line_Array_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        delay_line_Array_V_ce0 =  (sc_logic) (ap_const_lv1_1[0]);
    } else {
        delay_line_Array_V_ce0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_delay_line_Array_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        delay_line_Array_V_we0 =  (sc_logic) (ap_const_lv1_1[0]);
    } else {
        delay_line_Array_V_we0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_delayed_i_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        delayed_i_0_blk_n = delayed_i_0_full_n.read();
    } else {
        delayed_i_0_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_del::thread_delayed_i_0_din() {
    delayed_i_0_din = delay_line_Array_V_q0.read();
}

void Loop_sliding_win_del::thread_delayed_i_0_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        delayed_i_0_write = ap_const_logic_1;
    } else {
        delayed_i_0_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_delayed_i_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        delayed_i_1_blk_n = delayed_i_1_full_n.read();
    } else {
        delayed_i_1_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_del::thread_delayed_i_1_din() {
    delayed_i_1_din = delay_line_Array_V_q0.read();
}

void Loop_sliding_win_del::thread_delayed_i_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        delayed_i_1_write = ap_const_logic_1;
    } else {
        delayed_i_1_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_din_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        din_V_V_TDATA_blk_n = din_V_V_TVALID_int.read();
    } else {
        din_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_del::thread_din_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, din_V_V_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_din_V_V_U_ack_in.read()))) {
        din_V_V_TREADY = ap_const_logic_1;
    } else {
        din_V_V_TREADY = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_din_V_V_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        din_V_V_TREADY_int = ap_const_logic_1;
    } else {
        din_V_V_TREADY_int = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_i_fu_180_p2() {
    i_fu_180_p2 = (!ap_const_lv9_1.is_01() || !ap_phi_mux_i_0_i5_phi_fu_166_p6.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_1) + sc_biguint<9>(ap_phi_mux_i_0_i5_phi_fu_166_p6.read()));
}

void Loop_sliding_win_del::thread_icmp_ln76_fu_186_p2() {
    icmp_ln76_fu_186_p2 = (!ap_phi_mux_i_0_i5_phi_fu_166_p6.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_i5_phi_fu_166_p6.read() == ap_const_lv9_1FF);
}

void Loop_sliding_win_del::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(icmp_ln76_fu_186_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_nodelay_i_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        nodelay_i_0_blk_n = nodelay_i_0_full_n.read();
    } else {
        nodelay_i_0_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_del::thread_nodelay_i_0_din() {
    nodelay_i_0_din = din_val_V_reg_205.read();
}

void Loop_sliding_win_del::thread_nodelay_i_0_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(trunc_ln203_reg_212.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nodelay_i_0_write = ap_const_logic_1;
    } else {
        nodelay_i_0_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_nodelay_i_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        nodelay_i_1_blk_n = nodelay_i_1_full_n.read();
    } else {
        nodelay_i_1_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_del::thread_nodelay_i_1_din() {
    nodelay_i_1_din = din_val_V_reg_205.read();
}

void Loop_sliding_win_del::thread_nodelay_i_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, trunc_ln203_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nodelay_i_1_write = ap_const_logic_1;
    } else {
        nodelay_i_1_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Loop_sliding_win_del::thread_start_out() {
    start_out = real_start.read();
}

void Loop_sliding_win_del::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_del::thread_trunc_ln203_fu_176_p1() {
    trunc_ln203_fu_176_p1 = ap_phi_mux_i_0_i5_phi_fu_166_p6.read().range(1-1, 0);
}

void Loop_sliding_win_del::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

