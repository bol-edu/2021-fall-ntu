// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_sliding_win_out.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_sliding_win_out::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_sliding_win_out::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Loop_sliding_win_out::ap_ST_fsm_state1 = "1";
const sc_lv<3> Loop_sliding_win_out::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> Loop_sliding_win_out::ap_ST_fsm_pp0_stage1 = "100";
const bool Loop_sliding_win_out::ap_const_boolean_1 = true;
const sc_lv<32> Loop_sliding_win_out::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_sliding_win_out::ap_const_lv1_1 = "1";
const sc_lv<32> Loop_sliding_win_out::ap_const_lv32_2 = "10";
const sc_lv<1> Loop_sliding_win_out::ap_const_lv1_0 = "0";
const bool Loop_sliding_win_out::ap_const_boolean_0 = false;
const sc_lv<32> Loop_sliding_win_out::ap_const_lv32_1 = "1";
const sc_lv<10> Loop_sliding_win_out::ap_const_lv10_0 = "0000000000";
const sc_lv<32> Loop_sliding_win_out::ap_const_lv32_9 = "1001";
const sc_lv<11> Loop_sliding_win_out::ap_const_lv11_2 = "10";
const sc_lv<11> Loop_sliding_win_out::ap_const_lv11_400 = "10000000000";

Loop_sliding_win_out::Loop_sliding_win_out(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln84_fu_241_p2);
    sensitive << ( i2_0_i_01_cast_fu_221_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( data2window_1_full_n );
    sensitive << ( data2window_0_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( data2window_1_full_n );
    sensitive << ( data2window_0_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( data2window_1_full_n );
    sensitive << ( data2window_0_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( delayed_i_0_empty_n );
    sensitive << ( tmp_reg_258 );
    sensitive << ( nodelay_i_0_empty_n );
    sensitive << ( delayed_i_1_empty_n );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( nodelay_i_1_empty_n );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( delayed_i_0_empty_n );
    sensitive << ( tmp_reg_258 );
    sensitive << ( nodelay_i_0_empty_n );
    sensitive << ( delayed_i_1_empty_n );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( nodelay_i_1_empty_n );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( data2window_1_full_n );
    sensitive << ( data2window_0_full_n );

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);
    sensitive << ( delayed_i_0_empty_n );
    sensitive << ( tmp_reg_258 );
    sensitive << ( nodelay_i_0_empty_n );
    sensitive << ( delayed_i_1_empty_n );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( nodelay_i_1_empty_n );

    SC_METHOD(thread_ap_condition_114);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_condition_85);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln84_reg_296 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i2_0_i_01_phi_fu_191_p6);
    sensitive << ( i2_0_i_01_reg_187 );
    sensitive << ( empty_reg_271 );
    sensitive << ( icmp_ln84_reg_296 );
    sensitive << ( ap_condition_114 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211);

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_data2window_0_blk_n);
    sensitive << ( data2window_0_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_data2window_0_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_data2window_0_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data2window_1_blk_n);
    sensitive << ( data2window_1_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_data2window_1_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_data2window_1_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_delayed_i_0_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( delayed_i_0_empty_n );
    sensitive << ( tmp_reg_258 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_delayed_i_0_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_258 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_delayed_i_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( delayed_i_1_empty_n );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_delayed_i_1_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_empty_fu_247_p1);
    sensitive << ( add_ln84_fu_241_p2 );

    SC_METHOD(thread_i2_0_i_01_cast_fu_221_p1);
    sensitive << ( ap_phi_mux_i2_0_i_01_phi_fu_191_p6 );

    SC_METHOD(thread_icmp_ln84_fu_253_p2);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( add_ln84_reg_266 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( icmp_ln84_fu_253_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_nodelay_i_0_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_258 );
    sensitive << ( nodelay_i_0_empty_n );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_nodelay_i_0_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_258 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_nodelay_i_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( nodelay_i_1_empty_n );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_nodelay_i_1_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_reg_262 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_sliding_win_out_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, delayed_i_0_dout, "(port)delayed_i_0_dout");
    sc_trace(mVcdFile, delayed_i_0_empty_n, "(port)delayed_i_0_empty_n");
    sc_trace(mVcdFile, delayed_i_0_read, "(port)delayed_i_0_read");
    sc_trace(mVcdFile, nodelay_i_0_dout, "(port)nodelay_i_0_dout");
    sc_trace(mVcdFile, nodelay_i_0_empty_n, "(port)nodelay_i_0_empty_n");
    sc_trace(mVcdFile, nodelay_i_0_read, "(port)nodelay_i_0_read");
    sc_trace(mVcdFile, delayed_i_1_dout, "(port)delayed_i_1_dout");
    sc_trace(mVcdFile, delayed_i_1_empty_n, "(port)delayed_i_1_empty_n");
    sc_trace(mVcdFile, delayed_i_1_read, "(port)delayed_i_1_read");
    sc_trace(mVcdFile, nodelay_i_1_dout, "(port)nodelay_i_1_dout");
    sc_trace(mVcdFile, nodelay_i_1_empty_n, "(port)nodelay_i_1_empty_n");
    sc_trace(mVcdFile, nodelay_i_1_read, "(port)nodelay_i_1_read");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, data2window_1_din, "(port)data2window_1_din");
    sc_trace(mVcdFile, data2window_1_full_n, "(port)data2window_1_full_n");
    sc_trace(mVcdFile, data2window_1_write, "(port)data2window_1_write");
    sc_trace(mVcdFile, data2window_0_din, "(port)data2window_0_din");
    sc_trace(mVcdFile, data2window_0_full_n, "(port)data2window_0_full_n");
    sc_trace(mVcdFile, data2window_0_write, "(port)data2window_0_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, icmp_ln84_fu_253_p2, "icmp_ln84_fu_253_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_reg_258, "tmp_reg_258");
    sc_trace(mVcdFile, tmp_2_reg_262, "tmp_2_reg_262");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, data2window_1_blk_n, "data2window_1_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, delayed_i_1_blk_n, "delayed_i_1_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, data2window_0_blk_n, "data2window_0_blk_n");
    sc_trace(mVcdFile, delayed_i_0_blk_n, "delayed_i_0_blk_n");
    sc_trace(mVcdFile, nodelay_i_0_blk_n, "nodelay_i_0_blk_n");
    sc_trace(mVcdFile, nodelay_i_1_blk_n, "nodelay_i_1_blk_n");
    sc_trace(mVcdFile, i2_0_i_01_reg_187, "i2_0_i_01_reg_187");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln84_fu_241_p2, "add_ln84_fu_241_p2");
    sc_trace(mVcdFile, add_ln84_reg_266, "add_ln84_reg_266");
    sc_trace(mVcdFile, empty_fu_247_p1, "empty_fu_247_p1");
    sc_trace(mVcdFile, empty_reg_271, "empty_reg_271");
    sc_trace(mVcdFile, icmp_ln84_reg_296, "icmp_ln84_reg_296");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i2_0_i_01_phi_fu_191_p6, "ap_phi_mux_i2_0_i_01_phi_fu_191_p6");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201, "ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201, "ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211, "ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211, "ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i2_0_i_01_cast_fu_221_p1, "i2_0_i_01_cast_fu_221_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_114, "ap_condition_114");
    sc_trace(mVcdFile, ap_condition_85, "ap_condition_85");
#endif

    }
}

Loop_sliding_win_out::~Loop_sliding_win_out() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_sliding_win_out::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln84_reg_296.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = real_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_85.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read())) {
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 = nodelay_i_0_dout.read();
        } else if (esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0)) {
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 = delayed_i_0_dout.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 = ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_85.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read())) {
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 = nodelay_i_1_dout.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read())) {
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 = delayed_i_1_dout.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 = ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln84_reg_296.read()))) {
        i2_0_i_01_reg_187 = empty_reg_271.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln84_reg_296.read())))) {
        i2_0_i_01_reg_187 = ap_const_lv10_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln84_reg_266 = add_ln84_fu_241_p2.read();
        tmp_2_reg_262 = ap_phi_mux_i2_0_i_01_phi_fu_191_p6.read().range(9, 9);
        tmp_reg_258 = ap_phi_mux_i2_0_i_01_phi_fu_191_p6.read().range(9, 9);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        empty_reg_271 = empty_fu_247_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        icmp_ln84_reg_296 = icmp_ln84_fu_253_p2.read();
    }
}

void Loop_sliding_win_out::thread_add_ln84_fu_241_p2() {
    add_ln84_fu_241_p2 = (!ap_const_lv11_2.is_01() || !i2_0_i_01_cast_fu_221_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_2) + sc_biguint<11>(i2_0_i_01_cast_fu_221_p1.read()));
}

void Loop_sliding_win_out::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Loop_sliding_win_out::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void Loop_sliding_win_out::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, data2window_0_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, data2window_1_full_n.read())));
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, data2window_0_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, data2window_1_full_n.read())));
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, data2window_0_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, data2window_1_full_n.read())));
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read())))) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_sliding_win_out::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read())))) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_sliding_win_out::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_sliding_win_out::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_sliding_win_out::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, data2window_0_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data2window_1_full_n.read()));
}

void Loop_sliding_win_out::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_0_empty_n.read()) && 
  esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_0_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, delayed_i_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, nodelay_i_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read())));
}

void Loop_sliding_win_out::thread_ap_condition_114() {
    ap_condition_114 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void Loop_sliding_win_out::thread_ap_condition_85() {
    ap_condition_85 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0));
}

void Loop_sliding_win_out::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln84_reg_296.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_sliding_win_out::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_sliding_win_out::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = real_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void Loop_sliding_win_out::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_ap_phi_mux_i2_0_i_01_phi_fu_191_p6() {
    if (esl_seteq<1,1,1>(ap_condition_114.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln84_reg_296.read())) {
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = ap_const_lv10_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln84_reg_296.read())) {
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = empty_reg_271.read();
        } else {
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = i2_0_i_01_reg_187.read();
        }
    } else {
        ap_phi_mux_i2_0_i_01_phi_fu_191_p6 = i2_0_i_01_reg_187.read();
    }
}

void Loop_sliding_win_out::thread_ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201() {
    ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void Loop_sliding_win_out::thread_ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211() {
    ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void Loop_sliding_win_out::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Loop_sliding_win_out::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_data2window_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        data2window_0_blk_n = data2window_0_full_n.read();
    } else {
        data2window_0_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_data2window_0_din() {
    data2window_0_din = ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201.read();
}

void Loop_sliding_win_out::thread_data2window_0_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data2window_0_write = ap_const_logic_1;
    } else {
        data2window_0_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_data2window_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        data2window_1_blk_n = data2window_1_full_n.read();
    } else {
        data2window_1_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_data2window_1_din() {
    data2window_1_din = ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211.read();
}

void Loop_sliding_win_out::thread_data2window_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data2window_1_write = ap_const_logic_1;
    } else {
        data2window_1_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_delayed_i_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        delayed_i_0_blk_n = delayed_i_0_empty_n.read();
    } else {
        delayed_i_0_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_delayed_i_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_258.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        delayed_i_0_read = ap_const_logic_1;
    } else {
        delayed_i_0_read = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_delayed_i_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        delayed_i_1_blk_n = delayed_i_1_empty_n.read();
    } else {
        delayed_i_1_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_delayed_i_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_262.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        delayed_i_1_read = ap_const_logic_1;
    } else {
        delayed_i_1_read = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_empty_fu_247_p1() {
    empty_fu_247_p1 = add_ln84_fu_241_p2.read().range(10-1, 0);
}

void Loop_sliding_win_out::thread_i2_0_i_01_cast_fu_221_p1() {
    i2_0_i_01_cast_fu_221_p1 = esl_zext<11,10>(ap_phi_mux_i2_0_i_01_phi_fu_191_p6.read());
}

void Loop_sliding_win_out::thread_icmp_ln84_fu_253_p2() {
    icmp_ln84_fu_253_p2 = (!add_ln84_reg_266.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(add_ln84_reg_266.read() == ap_const_lv11_400);
}

void Loop_sliding_win_out::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(icmp_ln84_fu_253_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_nodelay_i_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        nodelay_i_0_blk_n = nodelay_i_0_empty_n.read();
    } else {
        nodelay_i_0_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_nodelay_i_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_258.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        nodelay_i_0_read = ap_const_logic_1;
    } else {
        nodelay_i_0_read = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_nodelay_i_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        nodelay_i_1_blk_n = nodelay_i_1_empty_n.read();
    } else {
        nodelay_i_1_blk_n = ap_const_logic_1;
    }
}

void Loop_sliding_win_out::thread_nodelay_i_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_262.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        nodelay_i_1_read = ap_const_logic_1;
    } else {
        nodelay_i_1_read = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Loop_sliding_win_out::thread_start_out() {
    start_out = real_start.read();
}

void Loop_sliding_win_out::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void Loop_sliding_win_out::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

