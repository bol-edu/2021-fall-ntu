-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_sliding_win_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    delayed_i_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_0_empty_n : IN STD_LOGIC;
    delayed_i_0_read : OUT STD_LOGIC;
    nodelay_i_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_0_empty_n : IN STD_LOGIC;
    nodelay_i_0_read : OUT STD_LOGIC;
    delayed_i_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_1_empty_n : IN STD_LOGIC;
    delayed_i_1_read : OUT STD_LOGIC;
    nodelay_i_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_1_empty_n : IN STD_LOGIC;
    nodelay_i_1_read : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data2window_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    data2window_1_full_n : IN STD_LOGIC;
    data2window_1_write : OUT STD_LOGIC;
    data2window_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    data2window_0_full_n : IN STD_LOGIC;
    data2window_0_write : OUT STD_LOGIC );
end;


architecture behav of Loop_sliding_win_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln84_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal data2window_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal delayed_i_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal data2window_0_blk_n : STD_LOGIC;
    signal delayed_i_0_blk_n : STD_LOGIC;
    signal nodelay_i_0_blk_n : STD_LOGIC;
    signal nodelay_i_1_blk_n : STD_LOGIC;
    signal i2_0_i_01_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln84_fu_241_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_reg_266 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_247_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_271 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln84_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_i2_0_i_01_phi_fu_191_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i2_0_i_01_cast_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_114 : BOOLEAN;
    signal ap_condition_85 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln84_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= real_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_85)) then
                if ((tmp_reg_258 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= nodelay_i_0_dout;
                elsif ((tmp_reg_258 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= delayed_i_0_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201 <= ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_85)) then
                if ((tmp_2_reg_262 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= nodelay_i_1_dout;
                elsif ((tmp_2_reg_262 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= delayed_i_1_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211 <= ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211;
                end if;
            end if; 
        end if;
    end process;

    i2_0_i_01_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_reg_296 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_0_i_01_reg_187 <= empty_reg_271;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln84_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                i2_0_i_01_reg_187 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln84_reg_266 <= add_ln84_fu_241_p2;
                tmp_2_reg_262 <= ap_phi_mux_i2_0_i_01_phi_fu_191_p6(9 downto 9);
                tmp_reg_258 <= ap_phi_mux_i2_0_i_01_phi_fu_191_p6(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_reg_271 <= empty_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln84_reg_296 <= icmp_ln84_fu_253_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln84_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(i2_0_i_01_cast_fu_221_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data2window_1_full_n, data2window_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((data2window_1_full_n = ap_const_logic_0) or (data2window_0_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data2window_1_full_n, data2window_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((data2window_1_full_n = ap_const_logic_0) or (data2window_0_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data2window_1_full_n, data2window_0_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((data2window_1_full_n = ap_const_logic_0) or (data2window_0_full_n = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter0, delayed_i_0_empty_n, tmp_reg_258, nodelay_i_0_empty_n, delayed_i_1_empty_n, tmp_2_reg_262, nodelay_i_1_empty_n)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((tmp_2_reg_262 = ap_const_lv1_1) and (nodelay_i_1_empty_n = ap_const_logic_0)) or ((tmp_2_reg_262 = ap_const_lv1_0) and (delayed_i_1_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_1) and (nodelay_i_0_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_0) and (delayed_i_0_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter0, delayed_i_0_empty_n, tmp_reg_258, nodelay_i_0_empty_n, delayed_i_1_empty_n, tmp_2_reg_262, nodelay_i_1_empty_n)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((tmp_2_reg_262 = ap_const_lv1_1) and (nodelay_i_1_empty_n = ap_const_logic_0)) or ((tmp_2_reg_262 = ap_const_lv1_0) and (delayed_i_1_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_1) and (nodelay_i_0_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_0) and (delayed_i_0_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data2window_1_full_n, data2window_0_full_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((data2window_1_full_n = ap_const_logic_0) or (data2window_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage1_iter0_assign_proc : process(delayed_i_0_empty_n, tmp_reg_258, nodelay_i_0_empty_n, delayed_i_1_empty_n, tmp_2_reg_262, nodelay_i_1_empty_n)
    begin
                ap_block_state4_pp0_stage1_iter0 <= (((tmp_2_reg_262 = ap_const_lv1_1) and (nodelay_i_1_empty_n = ap_const_logic_0)) or ((tmp_2_reg_262 = ap_const_lv1_0) and (delayed_i_1_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_1) and (nodelay_i_0_empty_n = ap_const_logic_0)) or ((tmp_reg_258 = ap_const_lv1_0) and (delayed_i_0_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_114_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_114 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_85_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
                ap_condition_85 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln84_reg_296)
    begin
        if (((icmp_ln84_reg_296 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= real_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_i_01_phi_fu_191_p6_assign_proc : process(i2_0_i_01_reg_187, empty_reg_271, icmp_ln84_reg_296, ap_condition_114)
    begin
        if ((ap_const_boolean_1 = ap_condition_114)) then
            if ((icmp_ln84_reg_296 = ap_const_lv1_1)) then 
                ap_phi_mux_i2_0_i_01_phi_fu_191_p6 <= ap_const_lv10_0;
            elsif ((icmp_ln84_reg_296 = ap_const_lv1_0)) then 
                ap_phi_mux_i2_0_i_01_phi_fu_191_p6 <= empty_reg_271;
            else 
                ap_phi_mux_i2_0_i_01_phi_fu_191_p6 <= i2_0_i_01_reg_187;
            end if;
        else 
            ap_phi_mux_i2_0_i_01_phi_fu_191_p6 <= i2_0_i_01_reg_187;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_014_0_i_0_reg_201 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_014_0_i_1_reg_211 <= "XXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data2window_0_blk_n_assign_proc : process(data2window_0_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data2window_0_blk_n <= data2window_0_full_n;
        else 
            data2window_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data2window_0_din <= ap_phi_reg_pp0_iter1_p_014_0_i_0_reg_201;

    data2window_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data2window_0_write <= ap_const_logic_1;
        else 
            data2window_0_write <= ap_const_logic_0;
        end if; 
    end process;


    data2window_1_blk_n_assign_proc : process(data2window_1_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data2window_1_blk_n <= data2window_1_full_n;
        else 
            data2window_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data2window_1_din <= ap_phi_reg_pp0_iter1_p_014_0_i_1_reg_211;

    data2window_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data2window_1_write <= ap_const_logic_1;
        else 
            data2window_1_write <= ap_const_logic_0;
        end if; 
    end process;


    delayed_i_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, delayed_i_0_empty_n, tmp_reg_258, ap_block_pp0_stage1)
    begin
        if (((tmp_reg_258 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            delayed_i_0_blk_n <= delayed_i_0_empty_n;
        else 
            delayed_i_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    delayed_i_0_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_258, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_258 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            delayed_i_0_read <= ap_const_logic_1;
        else 
            delayed_i_0_read <= ap_const_logic_0;
        end if; 
    end process;


    delayed_i_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, delayed_i_1_empty_n, tmp_2_reg_262, ap_block_pp0_stage1)
    begin
        if (((tmp_2_reg_262 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            delayed_i_1_blk_n <= delayed_i_1_empty_n;
        else 
            delayed_i_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    delayed_i_1_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_2_reg_262, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_2_reg_262 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            delayed_i_1_read <= ap_const_logic_1;
        else 
            delayed_i_1_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_247_p1 <= add_ln84_fu_241_p2(10 - 1 downto 0);
    i2_0_i_01_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i2_0_i_01_phi_fu_191_p6),11));
    icmp_ln84_fu_253_p2 <= "1" when (add_ln84_reg_266 = ap_const_lv11_400) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln84_fu_253_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln84_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    nodelay_i_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_258, nodelay_i_0_empty_n, ap_block_pp0_stage1)
    begin
        if (((tmp_reg_258 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            nodelay_i_0_blk_n <= nodelay_i_0_empty_n;
        else 
            nodelay_i_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nodelay_i_0_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_258, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_258 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            nodelay_i_0_read <= ap_const_logic_1;
        else 
            nodelay_i_0_read <= ap_const_logic_0;
        end if; 
    end process;


    nodelay_i_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_2_reg_262, nodelay_i_1_empty_n, ap_block_pp0_stage1)
    begin
        if (((tmp_2_reg_262 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            nodelay_i_1_blk_n <= nodelay_i_1_empty_n;
        else 
            nodelay_i_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nodelay_i_1_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_2_reg_262, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_2_reg_262 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            nodelay_i_1_read <= ap_const_logic_1;
        else 
            nodelay_i_1_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
