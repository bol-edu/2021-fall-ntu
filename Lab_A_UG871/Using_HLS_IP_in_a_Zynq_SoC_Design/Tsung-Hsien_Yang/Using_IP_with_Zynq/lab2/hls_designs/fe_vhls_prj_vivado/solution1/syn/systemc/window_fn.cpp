// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "window_fn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic window_fn::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic window_fn::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> window_fn::ap_ST_fsm_state1 = "1";
const sc_lv<3> window_fn::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> window_fn::ap_ST_fsm_pp0_stage1 = "100";
const bool window_fn::ap_const_boolean_1 = true;
const sc_lv<32> window_fn::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> window_fn::ap_const_lv1_1 = "1";
const sc_lv<32> window_fn::ap_const_lv32_2 = "10";
const bool window_fn::ap_const_boolean_0 = false;
const sc_lv<32> window_fn::ap_const_lv32_1 = "1";
const sc_lv<1> window_fn::ap_const_lv1_0 = "0";
const sc_lv<10> window_fn::ap_const_lv10_0 = "0000000000";
const sc_lv<32> window_fn::ap_const_lv32_9 = "1001";
const sc_lv<11> window_fn::ap_const_lv11_2 = "10";
const sc_lv<32> window_fn::ap_const_lv32_F = "1111";
const sc_lv<32> window_fn::ap_const_lv32_1E = "11110";
const sc_lv<11> window_fn::ap_const_lv11_400 = "10000000000";

window_fn::window_fn(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coeff_tab1_0_U = new window_fn_coeff_tcud("coeff_tab1_0_U");
    coeff_tab1_0_U->clk(ap_clk);
    coeff_tab1_0_U->reset(ap_rst);
    coeff_tab1_0_U->address0(coeff_tab1_0_address0);
    coeff_tab1_0_U->ce0(coeff_tab1_0_ce0);
    coeff_tab1_0_U->q0(coeff_tab1_0_q0);
    coeff_tab1_1_U = new window_fn_coeff_tdEe("coeff_tab1_1_U");
    coeff_tab1_1_U->clk(ap_clk);
    coeff_tab1_1_U->reset(ap_rst);
    coeff_tab1_1_U->address0(coeff_tab1_1_address0);
    coeff_tab1_1_U->ce0(coeff_tab1_1_ce0);
    coeff_tab1_1_U->q0(coeff_tab1_1_q0);
    hls_real2xfft_muleOg_U14 = new hls_real2xfft_muleOg<1,3,16,15,31>("hls_real2xfft_muleOg_U14");
    hls_real2xfft_muleOg_U14->clk(ap_clk);
    hls_real2xfft_muleOg_U14->reset(ap_rst);
    hls_real2xfft_muleOg_U14->din0(indata_0_V_read_reg_304);
    hls_real2xfft_muleOg_U14->din1(grp_fu_267_p1);
    hls_real2xfft_muleOg_U14->ce(grp_fu_267_ce);
    hls_real2xfft_muleOg_U14->dout(grp_fu_267_p2);
    hls_real2xfft_muleOg_U15 = new hls_real2xfft_muleOg<1,3,16,15,31>("hls_real2xfft_muleOg_U15");
    hls_real2xfft_muleOg_U15->clk(ap_clk);
    hls_real2xfft_muleOg_U15->reset(ap_rst);
    hls_real2xfft_muleOg_U15->din0(indata_1_V_read_reg_314);
    hls_real2xfft_muleOg_U15->din1(grp_fu_273_p1);
    hls_real2xfft_muleOg_U15->ce(grp_fu_273_ce);
    hls_real2xfft_muleOg_U15->dout(grp_fu_273_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln102_fu_219_p2);
    sensitive << ( zext_ln102_fu_199_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( outdata_0_V_full_n );
    sensitive << ( outdata_1_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( outdata_0_V_full_n );
    sensitive << ( outdata_1_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( outdata_0_V_full_n );
    sensitive << ( outdata_1_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indata_0_V_empty_n );
    sensitive << ( indata_1_V_empty_n );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indata_0_V_empty_n );
    sensitive << ( indata_1_V_empty_n );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter3);
    sensitive << ( outdata_0_V_full_n );
    sensitive << ( outdata_1_V_full_n );

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);
    sensitive << ( indata_0_V_empty_n );
    sensitive << ( indata_1_V_empty_n );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state8_pp0_stage1_iter2);

    SC_METHOD(thread_ap_condition_191);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln102_reg_319_pp0_iter2_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_i_0_017_phi_fu_189_p6);
    sensitive << ( i_0_017_reg_185 );
    sensitive << ( empty_7_reg_294 );
    sensitive << ( icmp_ln102_reg_319 );
    sensitive << ( ap_condition_191 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_coeff_tab1_0_address0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1116_fu_213_p1 );

    SC_METHOD(thread_coeff_tab1_0_ce0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_coeff_tab1_1_address0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1116_fu_213_p1 );

    SC_METHOD(thread_coeff_tab1_1_ce0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_empty_7_fu_225_p1);
    sensitive << ( add_ln102_fu_219_p2 );

    SC_METHOD(thread_grp_fu_267_ce);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_267_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_fu_267_p10 );

    SC_METHOD(thread_grp_fu_267_p10);
    sensitive << ( coeff_tab1_0_load_reg_299 );

    SC_METHOD(thread_grp_fu_273_ce);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_273_p1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_fu_273_p10 );

    SC_METHOD(thread_grp_fu_273_p10);
    sensitive << ( coeff_tab1_1_load_reg_309 );

    SC_METHOD(thread_icmp_ln102_fu_241_p2);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( add_ln102_reg_289 );

    SC_METHOD(thread_indata_0_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indata_0_V_empty_n );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_indata_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_indata_1_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indata_1_V_empty_n );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_indata_1_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( icmp_ln102_fu_241_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_outdata_0_V_blk_n);
    sensitive << ( outdata_0_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_outdata_0_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( trunc_ln_reg_348 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_outdata_0_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outdata_1_V_blk_n);
    sensitive << ( outdata_1_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_outdata_1_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( mul_ln1118_1_reg_353 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_outdata_1_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_1_fu_203_p4);
    sensitive << ( ap_phi_mux_i_0_017_phi_fu_189_p6 );

    SC_METHOD(thread_zext_ln102_fu_199_p1);
    sensitive << ( ap_phi_mux_i_0_017_phi_fu_189_p6 );

    SC_METHOD(thread_zext_ln1116_fu_213_p1);
    sensitive << ( tmp_1_fu_203_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "window_fn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indata_0_V_dout, "(port)indata_0_V_dout");
    sc_trace(mVcdFile, indata_0_V_empty_n, "(port)indata_0_V_empty_n");
    sc_trace(mVcdFile, indata_0_V_read, "(port)indata_0_V_read");
    sc_trace(mVcdFile, indata_1_V_dout, "(port)indata_1_V_dout");
    sc_trace(mVcdFile, indata_1_V_empty_n, "(port)indata_1_V_empty_n");
    sc_trace(mVcdFile, indata_1_V_read, "(port)indata_1_V_read");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, outdata_0_V_din, "(port)outdata_0_V_din");
    sc_trace(mVcdFile, outdata_0_V_full_n, "(port)outdata_0_V_full_n");
    sc_trace(mVcdFile, outdata_0_V_write, "(port)outdata_0_V_write");
    sc_trace(mVcdFile, outdata_1_V_din, "(port)outdata_1_V_din");
    sc_trace(mVcdFile, outdata_1_V_full_n, "(port)outdata_1_V_full_n");
    sc_trace(mVcdFile, outdata_1_V_write, "(port)outdata_1_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, icmp_ln102_fu_241_p2, "icmp_ln102_fu_241_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage1_iter1, "ap_block_state6_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage1_iter2, "ap_block_state8_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, coeff_tab1_0_address0, "coeff_tab1_0_address0");
    sc_trace(mVcdFile, coeff_tab1_0_ce0, "coeff_tab1_0_ce0");
    sc_trace(mVcdFile, coeff_tab1_0_q0, "coeff_tab1_0_q0");
    sc_trace(mVcdFile, coeff_tab1_1_address0, "coeff_tab1_1_address0");
    sc_trace(mVcdFile, coeff_tab1_1_ce0, "coeff_tab1_1_ce0");
    sc_trace(mVcdFile, coeff_tab1_1_q0, "coeff_tab1_1_q0");
    sc_trace(mVcdFile, indata_0_V_blk_n, "indata_0_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, indata_1_V_blk_n, "indata_1_V_blk_n");
    sc_trace(mVcdFile, outdata_0_V_blk_n, "outdata_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, outdata_1_V_blk_n, "outdata_1_V_blk_n");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter2, "ap_block_state7_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter3, "ap_block_state3_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_0_017_reg_185, "i_0_017_reg_185");
    sc_trace(mVcdFile, add_ln102_fu_219_p2, "add_ln102_fu_219_p2");
    sc_trace(mVcdFile, add_ln102_reg_289, "add_ln102_reg_289");
    sc_trace(mVcdFile, empty_7_fu_225_p1, "empty_7_fu_225_p1");
    sc_trace(mVcdFile, empty_7_reg_294, "empty_7_reg_294");
    sc_trace(mVcdFile, coeff_tab1_0_load_reg_299, "coeff_tab1_0_load_reg_299");
    sc_trace(mVcdFile, indata_0_V_read_reg_304, "indata_0_V_read_reg_304");
    sc_trace(mVcdFile, coeff_tab1_1_load_reg_309, "coeff_tab1_1_load_reg_309");
    sc_trace(mVcdFile, indata_1_V_read_reg_314, "indata_1_V_read_reg_314");
    sc_trace(mVcdFile, icmp_ln102_reg_319, "icmp_ln102_reg_319");
    sc_trace(mVcdFile, icmp_ln102_reg_319_pp0_iter1_reg, "icmp_ln102_reg_319_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln102_reg_319_pp0_iter2_reg, "icmp_ln102_reg_319_pp0_iter2_reg");
    sc_trace(mVcdFile, grp_fu_267_p2, "grp_fu_267_p2");
    sc_trace(mVcdFile, mul_ln1118_reg_343, "mul_ln1118_reg_343");
    sc_trace(mVcdFile, trunc_ln_reg_348, "trunc_ln_reg_348");
    sc_trace(mVcdFile, grp_fu_273_p2, "grp_fu_273_p2");
    sc_trace(mVcdFile, mul_ln1118_1_reg_353, "mul_ln1118_1_reg_353");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_017_phi_fu_189_p6, "ap_phi_mux_i_0_017_phi_fu_189_p6");
    sc_trace(mVcdFile, zext_ln1116_fu_213_p1, "zext_ln1116_fu_213_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_1_fu_203_p4, "tmp_1_fu_203_p4");
    sc_trace(mVcdFile, zext_ln102_fu_199_p1, "zext_ln102_fu_199_p1");
    sc_trace(mVcdFile, grp_fu_267_p1, "grp_fu_267_p1");
    sc_trace(mVcdFile, grp_fu_273_p1, "grp_fu_273_p1");
    sc_trace(mVcdFile, grp_fu_267_ce, "grp_fu_267_ce");
    sc_trace(mVcdFile, grp_fu_273_ce, "grp_fu_273_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_267_p10, "grp_fu_267_p10");
    sc_trace(mVcdFile, grp_fu_273_p10, "grp_fu_273_p10");
    sc_trace(mVcdFile, ap_condition_191, "ap_condition_191");
#endif

    }
}

window_fn::~window_fn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete coeff_tab1_0_U;
    delete coeff_tab1_1_U;
    delete hls_real2xfft_muleOg_U14;
    delete hls_real2xfft_muleOg_U15;
}

void window_fn::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln102_reg_319_pp0_iter2_reg.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = real_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln102_reg_319.read(), ap_const_lv1_0))) {
        i_0_017_reg_185 = empty_7_reg_294.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln102_reg_319.read())))) {
        i_0_017_reg_185 = ap_const_lv10_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln102_reg_289 = add_ln102_fu_219_p2.read();
        mul_ln1118_reg_343 = grp_fu_267_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        coeff_tab1_0_load_reg_299 = coeff_tab1_0_q0.read();
        coeff_tab1_1_load_reg_309 = coeff_tab1_1_q0.read();
        icmp_ln102_reg_319 = icmp_ln102_fu_241_p2.read();
        icmp_ln102_reg_319_pp0_iter1_reg = icmp_ln102_reg_319.read();
        icmp_ln102_reg_319_pp0_iter2_reg = icmp_ln102_reg_319_pp0_iter1_reg.read();
        indata_0_V_read_reg_304 = indata_0_V_dout.read();
        indata_1_V_read_reg_314 = indata_1_V_dout.read();
        mul_ln1118_1_reg_353 = grp_fu_273_p2.read();
        trunc_ln_reg_348 = mul_ln1118_reg_343.read().range(30, 15);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        empty_7_reg_294 = empty_7_fu_225_p1.read();
    }
}

void window_fn::thread_add_ln102_fu_219_p2() {
    add_ln102_fu_219_p2 = (!ap_const_lv11_2.is_01() || !zext_ln102_fu_199_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_2) + sc_biguint<11>(zext_ln102_fu_199_p1.read()));
}

void window_fn::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void window_fn::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void window_fn::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void window_fn::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, outdata_0_V_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_1_V_full_n.read())));
}

void window_fn::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, outdata_0_V_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_1_V_full_n.read())));
}

void window_fn::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, outdata_0_V_full_n.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, outdata_1_V_full_n.read())));
}

void window_fn::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, indata_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, indata_1_V_empty_n.read()))) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void window_fn::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, indata_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, indata_1_V_empty_n.read()))) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void window_fn::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void window_fn::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_state3_pp0_stage0_iter3() {
    ap_block_state3_pp0_stage0_iter3 = (esl_seteq<1,1,1>(ap_const_logic_0, outdata_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, outdata_1_V_full_n.read()));
}

void window_fn::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, indata_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, indata_1_V_empty_n.read()));
}

void window_fn::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_state6_pp0_stage1_iter1() {
    ap_block_state6_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_state7_pp0_stage0_iter2() {
    ap_block_state7_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_block_state8_pp0_stage1_iter2() {
    ap_block_state8_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void window_fn::thread_ap_condition_191() {
    ap_condition_191 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void window_fn::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln102_reg_319_pp0_iter2_reg.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void window_fn::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void window_fn::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = real_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void window_fn::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void window_fn::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void window_fn::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void window_fn::thread_ap_phi_mux_i_0_017_phi_fu_189_p6() {
    if (esl_seteq<1,1,1>(ap_condition_191.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln102_reg_319.read())) {
            ap_phi_mux_i_0_017_phi_fu_189_p6 = ap_const_lv10_0;
        } else if (esl_seteq<1,1,1>(icmp_ln102_reg_319.read(), ap_const_lv1_0)) {
            ap_phi_mux_i_0_017_phi_fu_189_p6 = empty_7_reg_294.read();
        } else {
            ap_phi_mux_i_0_017_phi_fu_189_p6 = i_0_017_reg_185.read();
        }
    } else {
        ap_phi_mux_i_0_017_phi_fu_189_p6 = i_0_017_reg_185.read();
    }
}

void window_fn::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void window_fn::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void window_fn::thread_coeff_tab1_0_address0() {
    coeff_tab1_0_address0 =  (sc_lv<9>) (zext_ln1116_fu_213_p1.read());
}

void window_fn::thread_coeff_tab1_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        coeff_tab1_0_ce0 = ap_const_logic_1;
    } else {
        coeff_tab1_0_ce0 = ap_const_logic_0;
    }
}

void window_fn::thread_coeff_tab1_1_address0() {
    coeff_tab1_1_address0 =  (sc_lv<9>) (zext_ln1116_fu_213_p1.read());
}

void window_fn::thread_coeff_tab1_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        coeff_tab1_1_ce0 = ap_const_logic_1;
    } else {
        coeff_tab1_1_ce0 = ap_const_logic_0;
    }
}

void window_fn::thread_empty_7_fu_225_p1() {
    empty_7_fu_225_p1 = add_ln102_fu_219_p2.read().range(10-1, 0);
}

void window_fn::thread_grp_fu_267_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        grp_fu_267_ce = ap_const_logic_1;
    } else {
        grp_fu_267_ce = ap_const_logic_0;
    }
}

void window_fn::thread_grp_fu_267_p1() {
    grp_fu_267_p1 =  (sc_lv<15>) (grp_fu_267_p10.read());
}

void window_fn::thread_grp_fu_267_p10() {
    grp_fu_267_p10 = esl_zext<31,15>(coeff_tab1_0_load_reg_299.read());
}

void window_fn::thread_grp_fu_273_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        grp_fu_273_ce = ap_const_logic_1;
    } else {
        grp_fu_273_ce = ap_const_logic_0;
    }
}

void window_fn::thread_grp_fu_273_p1() {
    grp_fu_273_p1 =  (sc_lv<15>) (grp_fu_273_p10.read());
}

void window_fn::thread_grp_fu_273_p10() {
    grp_fu_273_p10 = esl_zext<31,15>(coeff_tab1_1_load_reg_309.read());
}

void window_fn::thread_icmp_ln102_fu_241_p2() {
    icmp_ln102_fu_241_p2 = (!add_ln102_reg_289.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(add_ln102_reg_289.read() == ap_const_lv11_400);
}

void window_fn::thread_indata_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        indata_0_V_blk_n = indata_0_V_empty_n.read();
    } else {
        indata_0_V_blk_n = ap_const_logic_1;
    }
}

void window_fn::thread_indata_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        indata_0_V_read = ap_const_logic_1;
    } else {
        indata_0_V_read = ap_const_logic_0;
    }
}

void window_fn::thread_indata_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        indata_1_V_blk_n = indata_1_V_empty_n.read();
    } else {
        indata_1_V_blk_n = ap_const_logic_1;
    }
}

void window_fn::thread_indata_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        indata_1_V_read = ap_const_logic_1;
    } else {
        indata_1_V_read = ap_const_logic_0;
    }
}

void window_fn::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(icmp_ln102_fu_241_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void window_fn::thread_outdata_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        outdata_0_V_blk_n = outdata_0_V_full_n.read();
    } else {
        outdata_0_V_blk_n = ap_const_logic_1;
    }
}

void window_fn::thread_outdata_0_V_din() {
    outdata_0_V_din = trunc_ln_reg_348.read();
}

void window_fn::thread_outdata_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outdata_0_V_write = ap_const_logic_1;
    } else {
        outdata_0_V_write = ap_const_logic_0;
    }
}

void window_fn::thread_outdata_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        outdata_1_V_blk_n = outdata_1_V_full_n.read();
    } else {
        outdata_1_V_blk_n = ap_const_logic_1;
    }
}

void window_fn::thread_outdata_1_V_din() {
    outdata_1_V_din = mul_ln1118_1_reg_353.read().range(30, 15);
}

void window_fn::thread_outdata_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outdata_1_V_write = ap_const_logic_1;
    } else {
        outdata_1_V_write = ap_const_logic_0;
    }
}

void window_fn::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void window_fn::thread_start_out() {
    start_out = real_start.read();
}

void window_fn::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void window_fn::thread_tmp_1_fu_203_p4() {
    tmp_1_fu_203_p4 = ap_phi_mux_i_0_017_phi_fu_189_p6.read().range(9, 1);
}

void window_fn::thread_zext_ln102_fu_199_p1() {
    zext_ln102_fu_199_p1 = esl_zext<11,10>(ap_phi_mux_i_0_017_phi_fu_189_p6.read());
}

void window_fn::thread_zext_ln1116_fu_213_p1() {
    zext_ln1116_fu_213_p1 = esl_zext<64,9>(tmp_1_fu_203_p4.read());
}

void window_fn::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

