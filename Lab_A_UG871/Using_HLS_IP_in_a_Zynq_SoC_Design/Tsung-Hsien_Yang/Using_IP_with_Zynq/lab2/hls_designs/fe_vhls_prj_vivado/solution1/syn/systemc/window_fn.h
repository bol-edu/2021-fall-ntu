// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _window_fn_HH_
#define _window_fn_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "hls_real2xfft_muleOg.h"
#include "window_fn_coeff_tcud.h"
#include "window_fn_coeff_tdEe.h"

namespace ap_rtl {

struct window_fn : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > indata_0_V_dout;
    sc_in< sc_logic > indata_0_V_empty_n;
    sc_out< sc_logic > indata_0_V_read;
    sc_in< sc_lv<16> > indata_1_V_dout;
    sc_in< sc_logic > indata_1_V_empty_n;
    sc_out< sc_logic > indata_1_V_read;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<16> > outdata_0_V_din;
    sc_in< sc_logic > outdata_0_V_full_n;
    sc_out< sc_logic > outdata_0_V_write;
    sc_out< sc_lv<16> > outdata_1_V_din;
    sc_in< sc_logic > outdata_1_V_full_n;
    sc_out< sc_logic > outdata_1_V_write;


    // Module declarations
    window_fn(sc_module_name name);
    SC_HAS_PROCESS(window_fn);

    ~window_fn();

    sc_trace_file* mVcdFile;

    window_fn_coeff_tcud* coeff_tab1_0_U;
    window_fn_coeff_tdEe* coeff_tab1_1_U;
    hls_real2xfft_muleOg<1,3,16,15,31>* hls_real2xfft_muleOg_U14;
    hls_real2xfft_muleOg<1,3,16,15,31>* hls_real2xfft_muleOg_U15;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > icmp_ln102_fu_241_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<9> > coeff_tab1_0_address0;
    sc_signal< sc_logic > coeff_tab1_0_ce0;
    sc_signal< sc_lv<15> > coeff_tab1_0_q0;
    sc_signal< sc_lv<9> > coeff_tab1_1_address0;
    sc_signal< sc_logic > coeff_tab1_1_ce0;
    sc_signal< sc_lv<15> > coeff_tab1_1_q0;
    sc_signal< sc_logic > indata_0_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > indata_1_V_blk_n;
    sc_signal< sc_logic > outdata_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > outdata_1_V_blk_n;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > i_0_017_reg_185;
    sc_signal< sc_lv<11> > add_ln102_fu_219_p2;
    sc_signal< sc_lv<11> > add_ln102_reg_289;
    sc_signal< sc_lv<10> > empty_7_fu_225_p1;
    sc_signal< sc_lv<10> > empty_7_reg_294;
    sc_signal< sc_lv<15> > coeff_tab1_0_load_reg_299;
    sc_signal< sc_lv<16> > indata_0_V_read_reg_304;
    sc_signal< sc_lv<15> > coeff_tab1_1_load_reg_309;
    sc_signal< sc_lv<16> > indata_1_V_read_reg_314;
    sc_signal< sc_lv<1> > icmp_ln102_reg_319;
    sc_signal< sc_lv<1> > icmp_ln102_reg_319_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln102_reg_319_pp0_iter2_reg;
    sc_signal< sc_lv<31> > grp_fu_267_p2;
    sc_signal< sc_lv<31> > mul_ln1118_reg_343;
    sc_signal< sc_lv<16> > trunc_ln_reg_348;
    sc_signal< sc_lv<31> > grp_fu_273_p2;
    sc_signal< sc_lv<31> > mul_ln1118_1_reg_353;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<10> > ap_phi_mux_i_0_017_phi_fu_189_p6;
    sc_signal< sc_lv<64> > zext_ln1116_fu_213_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<9> > tmp_1_fu_203_p4;
    sc_signal< sc_lv<11> > zext_ln102_fu_199_p1;
    sc_signal< sc_lv<15> > grp_fu_267_p1;
    sc_signal< sc_lv<15> > grp_fu_273_p1;
    sc_signal< sc_logic > grp_fu_267_ce;
    sc_signal< sc_logic > grp_fu_273_ce;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to2;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<31> > grp_fu_267_p10;
    sc_signal< sc_lv<31> > grp_fu_273_p10;
    sc_signal< bool > ap_condition_191;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<11> ap_const_lv11_2;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<11> ap_const_lv11_400;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln102_fu_219_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter3();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage1_iter1();
    void thread_ap_block_state7_pp0_stage0_iter2();
    void thread_ap_block_state8_pp0_stage1_iter2();
    void thread_ap_condition_191();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to2();
    void thread_ap_phi_mux_i_0_017_phi_fu_189_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_coeff_tab1_0_address0();
    void thread_coeff_tab1_0_ce0();
    void thread_coeff_tab1_1_address0();
    void thread_coeff_tab1_1_ce0();
    void thread_empty_7_fu_225_p1();
    void thread_grp_fu_267_ce();
    void thread_grp_fu_267_p1();
    void thread_grp_fu_267_p10();
    void thread_grp_fu_273_ce();
    void thread_grp_fu_273_p1();
    void thread_grp_fu_273_p10();
    void thread_icmp_ln102_fu_241_p2();
    void thread_indata_0_V_blk_n();
    void thread_indata_0_V_read();
    void thread_indata_1_V_blk_n();
    void thread_indata_1_V_read();
    void thread_internal_ap_ready();
    void thread_outdata_0_V_blk_n();
    void thread_outdata_0_V_din();
    void thread_outdata_0_V_write();
    void thread_outdata_1_V_blk_n();
    void thread_outdata_1_V_din();
    void thread_outdata_1_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_1_fu_203_p4();
    void thread_zext_ln102_fu_199_p1();
    void thread_zext_ln1116_fu_213_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
