// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module window_fn (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        indata_0_V_dout,
        indata_0_V_empty_n,
        indata_0_V_read,
        indata_1_V_dout,
        indata_1_V_empty_n,
        indata_1_V_read,
        start_out,
        start_write,
        outdata_0_V_din,
        outdata_0_V_full_n,
        outdata_0_V_write,
        outdata_1_V_din,
        outdata_1_V_full_n,
        outdata_1_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] indata_0_V_dout;
input   indata_0_V_empty_n;
output   indata_0_V_read;
input  [15:0] indata_1_V_dout;
input   indata_1_V_empty_n;
output   indata_1_V_read;
output   start_out;
output   start_write;
output  [15:0] outdata_0_V_din;
input   outdata_0_V_full_n;
output   outdata_0_V_write;
output  [15:0] outdata_1_V_din;
input   outdata_1_V_full_n;
output   outdata_1_V_write;

reg ap_done;
reg ap_idle;
reg indata_0_V_read;
reg indata_1_V_read;
reg start_write;
reg outdata_0_V_write;
reg outdata_1_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] icmp_ln102_fu_241_p2;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [8:0] coeff_tab1_0_address0;
reg    coeff_tab1_0_ce0;
wire   [14:0] coeff_tab1_0_q0;
wire   [8:0] coeff_tab1_1_address0;
reg    coeff_tab1_1_ce0;
wire   [14:0] coeff_tab1_1_q0;
reg    indata_0_V_blk_n;
wire    ap_block_pp0_stage1;
reg    indata_1_V_blk_n;
reg    outdata_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg    outdata_1_V_blk_n;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state3_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] i_0_017_reg_185;
wire   [10:0] add_ln102_fu_219_p2;
reg   [10:0] add_ln102_reg_289;
wire   [9:0] empty_7_fu_225_p1;
reg   [9:0] empty_7_reg_294;
reg   [14:0] coeff_tab1_0_load_reg_299;
reg  signed [15:0] indata_0_V_read_reg_304;
reg   [14:0] coeff_tab1_1_load_reg_309;
reg  signed [15:0] indata_1_V_read_reg_314;
reg   [0:0] icmp_ln102_reg_319;
reg   [0:0] icmp_ln102_reg_319_pp0_iter1_reg;
reg   [0:0] icmp_ln102_reg_319_pp0_iter2_reg;
wire  signed [30:0] grp_fu_267_p2;
reg  signed [30:0] mul_ln1118_reg_343;
reg   [15:0] trunc_ln_reg_348;
wire  signed [30:0] grp_fu_273_p2;
reg  signed [30:0] mul_ln1118_1_reg_353;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_state1;
reg   [9:0] ap_phi_mux_i_0_017_phi_fu_189_p6;
wire   [63:0] zext_ln1116_fu_213_p1;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] tmp_1_fu_203_p4;
wire   [10:0] zext_ln102_fu_199_p1;
wire   [14:0] grp_fu_267_p1;
wire   [14:0] grp_fu_273_p1;
reg    grp_fu_267_ce;
reg    grp_fu_273_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [30:0] grp_fu_267_p10;
wire   [30:0] grp_fu_273_p10;
reg    ap_condition_191;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

window_fn_coeff_tcud #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab1_0_address0),
    .ce0(coeff_tab1_0_ce0),
    .q0(coeff_tab1_0_q0)
);

window_fn_coeff_tdEe #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab1_1_address0),
    .ce0(coeff_tab1_1_ce0),
    .q0(coeff_tab1_1_q0)
);

hls_real2xfft_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
hls_real2xfft_muleOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata_0_V_read_reg_304),
    .din1(grp_fu_267_p1),
    .ce(grp_fu_267_ce),
    .dout(grp_fu_267_p2)
);

hls_real2xfft_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
hls_real2xfft_muleOg_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata_1_V_read_reg_314),
    .din1(grp_fu_273_p1),
    .ce(grp_fu_273_ce),
    .dout(grp_fu_273_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln102_reg_319_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln102_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_017_reg_185 <= empty_7_reg_294;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln102_reg_319 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        i_0_017_reg_185 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln102_reg_289 <= add_ln102_fu_219_p2;
        mul_ln1118_reg_343 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        coeff_tab1_0_load_reg_299 <= coeff_tab1_0_q0;
        coeff_tab1_1_load_reg_309 <= coeff_tab1_1_q0;
        icmp_ln102_reg_319 <= icmp_ln102_fu_241_p2;
        icmp_ln102_reg_319_pp0_iter1_reg <= icmp_ln102_reg_319;
        icmp_ln102_reg_319_pp0_iter2_reg <= icmp_ln102_reg_319_pp0_iter1_reg;
        indata_0_V_read_reg_304 <= indata_0_V_dout;
        indata_1_V_read_reg_314 <= indata_1_V_dout;
        mul_ln1118_1_reg_353 <= grp_fu_273_p2;
        trunc_ln_reg_348 <= {{mul_ln1118_reg_343[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_7_reg_294 <= empty_7_fu_225_p1;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_319_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = real_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_191)) begin
        if ((icmp_ln102_reg_319 == 1'd1)) begin
            ap_phi_mux_i_0_017_phi_fu_189_p6 = 10'd0;
        end else if ((icmp_ln102_reg_319 == 1'd0)) begin
            ap_phi_mux_i_0_017_phi_fu_189_p6 = empty_7_reg_294;
        end else begin
            ap_phi_mux_i_0_017_phi_fu_189_p6 = i_0_017_reg_185;
        end
    end else begin
        ap_phi_mux_i_0_017_phi_fu_189_p6 = i_0_017_reg_185;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_tab1_0_ce0 = 1'b1;
    end else begin
        coeff_tab1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coeff_tab1_1_ce0 = 1'b1;
    end else begin
        coeff_tab1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_273_ce = 1'b1;
    end else begin
        grp_fu_273_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indata_0_V_blk_n = indata_0_V_empty_n;
    end else begin
        indata_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indata_0_V_read = 1'b1;
    end else begin
        indata_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indata_1_V_blk_n = indata_1_V_empty_n;
    end else begin
        indata_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indata_1_V_read = 1'b1;
    end else begin
        indata_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln102_fu_241_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        outdata_0_V_blk_n = outdata_0_V_full_n;
    end else begin
        outdata_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outdata_0_V_write = 1'b1;
    end else begin
        outdata_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        outdata_1_V_blk_n = outdata_1_V_full_n;
    end else begin
        outdata_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outdata_1_V_write = 1'b1;
    end else begin
        outdata_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_219_p2 = (11'd2 + zext_ln102_fu_199_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter3 = ((outdata_1_V_full_n == 1'b0) | (outdata_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((indata_1_V_empty_n == 1'b0) | (indata_0_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_191 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign coeff_tab1_0_address0 = zext_ln1116_fu_213_p1;

assign coeff_tab1_1_address0 = zext_ln1116_fu_213_p1;

assign empty_7_fu_225_p1 = add_ln102_fu_219_p2[9:0];

assign grp_fu_267_p1 = grp_fu_267_p10;

assign grp_fu_267_p10 = coeff_tab1_0_load_reg_299;

assign grp_fu_273_p1 = grp_fu_273_p10;

assign grp_fu_273_p10 = coeff_tab1_1_load_reg_309;

assign icmp_ln102_fu_241_p2 = ((add_ln102_reg_289 == 11'd1024) ? 1'b1 : 1'b0);

assign outdata_0_V_din = trunc_ln_reg_348;

assign outdata_1_V_din = {{mul_ln1118_1_reg_353[30:15]}};

assign start_out = real_start;

assign tmp_1_fu_203_p4 = {{ap_phi_mux_i_0_017_phi_fu_189_p6[9:1]}};

assign zext_ln102_fu_199_p1 = ap_phi_mux_i_0_017_phi_fu_189_p6;

assign zext_ln1116_fu_213_p1 = tmp_1_fu_203_p4;

endmodule //window_fn
