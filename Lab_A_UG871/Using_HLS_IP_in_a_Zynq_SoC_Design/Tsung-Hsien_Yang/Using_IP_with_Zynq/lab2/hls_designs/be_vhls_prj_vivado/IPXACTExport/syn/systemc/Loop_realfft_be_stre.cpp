// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_realfft_be_stre.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_realfft_be_stre::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_realfft_be_stre::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Loop_realfft_be_stre::ap_ST_fsm_state1 = "1";
const sc_lv<2> Loop_realfft_be_stre::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<32> Loop_realfft_be_stre::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_realfft_be_stre::ap_const_boolean_1 = true;
const sc_lv<1> Loop_realfft_be_stre::ap_const_lv1_1 = "1";
const sc_lv<32> Loop_realfft_be_stre::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_realfft_be_stre::ap_const_lv1_0 = "0";
const bool Loop_realfft_be_stre::ap_const_boolean_0 = false;
const sc_lv<9> Loop_realfft_be_stre::ap_const_lv9_0 = "000000000";
const sc_lv<32> Loop_realfft_be_stre::ap_const_lv32_8 = "1000";
const sc_lv<9> Loop_realfft_be_stre::ap_const_lv9_1 = "1";
const sc_lv<9> Loop_realfft_be_stre::ap_const_lv9_1FF = "111111111";

Loop_realfft_be_stre::Loop_realfft_be_stre(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_dout_V_data_U = new regslice_both<32>("regslice_both_dout_V_data_U");
    regslice_both_dout_V_data_U->ap_clk(ap_clk);
    regslice_both_dout_V_data_U->ap_rst(ap_rst);
    regslice_both_dout_V_data_U->data_in(dout_TDATA_int);
    regslice_both_dout_V_data_U->vld_in(dout_TVALID_int);
    regslice_both_dout_V_data_U->ack_in(dout_TREADY_int);
    regslice_both_dout_V_data_U->data_out(dout_TDATA);
    regslice_both_dout_V_data_U->vld_out(regslice_both_dout_V_data_U_vld_out);
    regslice_both_dout_V_data_U->ack_out(dout_TREADY);
    regslice_both_dout_V_data_U->apdone_blk(regslice_both_dout_V_data_U_apdone_blk);
    regslice_both_dout_V_last_V_U = new regslice_both<1>("regslice_both_dout_V_last_V_U");
    regslice_both_dout_V_last_V_U->ap_clk(ap_clk);
    regslice_both_dout_V_last_V_U->ap_rst(ap_rst);
    regslice_both_dout_V_last_V_U->data_in(dout_val_last_V_reg_248);
    regslice_both_dout_V_last_V_U->vld_in(dout_TVALID_int);
    regslice_both_dout_V_last_V_U->ack_in(regslice_both_dout_V_last_V_U_ack_in_dummy);
    regslice_both_dout_V_last_V_U->data_out(dout_TLAST);
    regslice_both_dout_V_last_V_U->vld_out(regslice_both_dout_V_last_V_U_vld_out);
    regslice_both_dout_V_last_V_U->ack_out(dout_TREADY);
    regslice_both_dout_V_last_V_U->apdone_blk(regslice_both_dout_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( io_acc_block_signal_op32 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_dout_V_data_U_apdone_blk );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( io_acc_block_signal_op32 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_dout_V_data_U_apdone_blk );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( dout_TREADY_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( io_acc_block_signal_op32 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_dout_V_data_U_apdone_blk );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( dout_TREADY_int );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( regslice_both_dout_V_data_U_apdone_blk );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( io_acc_block_signal_op32 );

    SC_METHOD(thread_ap_condition_97);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( dout_val_last_V_reg_248_pp0_iter1_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i4_0_i1_phi_fu_160_p6);
    sensitive << ( i4_0_i1_reg_156 );
    sensitive << ( i_reg_243 );
    sensitive << ( dout_val_last_V_reg_248 );
    sensitive << ( ap_condition_97 );

    SC_METHOD(thread_ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4);
    sensitive << ( real_spectrum_lo_V_M_imag_V_dout );
    sensitive << ( tmp_reg_239 );
    sensitive << ( real_spectrum_hi_V_M_imag_V_dout );
    sensitive << ( ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170 );

    SC_METHOD(thread_ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4);
    sensitive << ( real_spectrum_lo_V_M_real_V_dout );
    sensitive << ( tmp_reg_239 );
    sensitive << ( real_spectrum_hi_V_M_real_V_dout );
    sensitive << ( ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170);

    SC_METHOD(thread_ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179);

    SC_METHOD(thread_ap_ready);
    sensitive << ( dout_val_last_V_fu_202_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_dout_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( dout_TREADY_int );

    SC_METHOD(thread_dout_TDATA_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 );
    sensitive << ( ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dout_TVALID);
    sensitive << ( regslice_both_dout_V_data_U_vld_out );

    SC_METHOD(thread_dout_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dout_val_last_V_fu_202_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i4_0_i1_phi_fu_160_p6 );

    SC_METHOD(thread_i_fu_196_p2);
    sensitive << ( ap_phi_mux_i4_0_i1_phi_fu_160_p6 );

    SC_METHOD(thread_io_acc_block_signal_op28);
    sensitive << ( real_spectrum_lo_V_M_real_V_empty_n );
    sensitive << ( real_spectrum_lo_V_M_imag_V_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op32);
    sensitive << ( real_spectrum_hi_V_M_real_V_empty_n );
    sensitive << ( real_spectrum_hi_V_M_imag_V_empty_n );

    SC_METHOD(thread_real_spectrum_hi_V_M_imag_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( real_spectrum_hi_V_M_imag_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_real_spectrum_hi_V_M_imag_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_spectrum_hi_V_M_real_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( real_spectrum_hi_V_M_real_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_real_spectrum_hi_V_M_real_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_spectrum_lo_V_M_imag_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( real_spectrum_lo_V_M_imag_V_empty_n );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_real_spectrum_lo_V_M_imag_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_spectrum_lo_V_M_real_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( real_spectrum_lo_V_M_real_V_empty_n );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_real_spectrum_lo_V_M_real_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_realfft_be_stre_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_real_V_dout, "(port)real_spectrum_lo_V_M_real_V_dout");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_real_V_empty_n, "(port)real_spectrum_lo_V_M_real_V_empty_n");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_real_V_read, "(port)real_spectrum_lo_V_M_real_V_read");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_imag_V_dout, "(port)real_spectrum_lo_V_M_imag_V_dout");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_imag_V_empty_n, "(port)real_spectrum_lo_V_M_imag_V_empty_n");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_imag_V_read, "(port)real_spectrum_lo_V_M_imag_V_read");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_real_V_dout, "(port)real_spectrum_hi_V_M_real_V_dout");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_real_V_empty_n, "(port)real_spectrum_hi_V_M_real_V_empty_n");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_real_V_read, "(port)real_spectrum_hi_V_M_real_V_read");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_imag_V_dout, "(port)real_spectrum_hi_V_M_imag_V_dout");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_imag_V_empty_n, "(port)real_spectrum_hi_V_M_imag_V_empty_n");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_imag_V_read, "(port)real_spectrum_hi_V_M_imag_V_read");
    sc_trace(mVcdFile, dout_TREADY, "(port)dout_TREADY");
    sc_trace(mVcdFile, dout_TDATA, "(port)dout_TDATA");
    sc_trace(mVcdFile, dout_TVALID, "(port)dout_TVALID");
    sc_trace(mVcdFile, dout_TLAST, "(port)dout_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dout_val_last_V_fu_202_p2, "dout_val_last_V_fu_202_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, io_acc_block_signal_op28, "io_acc_block_signal_op28");
    sc_trace(mVcdFile, tmp_reg_239, "tmp_reg_239");
    sc_trace(mVcdFile, io_acc_block_signal_op32, "io_acc_block_signal_op32");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, regslice_both_dout_V_data_U_apdone_blk, "regslice_both_dout_V_data_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, dout_TDATA_blk_n, "dout_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_real_V_blk_n, "real_spectrum_lo_V_M_real_V_blk_n");
    sc_trace(mVcdFile, real_spectrum_lo_V_M_imag_V_blk_n, "real_spectrum_lo_V_M_imag_V_blk_n");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_real_V_blk_n, "real_spectrum_hi_V_M_real_V_blk_n");
    sc_trace(mVcdFile, real_spectrum_hi_V_M_imag_V_blk_n, "real_spectrum_hi_V_M_imag_V_blk_n");
    sc_trace(mVcdFile, i4_0_i1_reg_156, "i4_0_i1_reg_156");
    sc_trace(mVcdFile, i_fu_196_p2, "i_fu_196_p2");
    sc_trace(mVcdFile, i_reg_243, "i_reg_243");
    sc_trace(mVcdFile, dout_val_last_V_reg_248, "dout_val_last_V_reg_248");
    sc_trace(mVcdFile, dout_val_last_V_reg_248_pp0_iter1_reg, "dout_val_last_V_reg_248_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i4_0_i1_phi_fu_160_p6, "ap_phi_mux_i4_0_i1_phi_fu_160_p6");
    sc_trace(mVcdFile, ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4, "ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170, "ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170");
    sc_trace(mVcdFile, ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4, "ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179, "ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, dout_TDATA_int, "dout_TDATA_int");
    sc_trace(mVcdFile, dout_TVALID_int, "dout_TVALID_int");
    sc_trace(mVcdFile, dout_TREADY_int, "dout_TREADY_int");
    sc_trace(mVcdFile, regslice_both_dout_V_data_U_vld_out, "regslice_both_dout_V_data_U_vld_out");
    sc_trace(mVcdFile, regslice_both_dout_V_last_V_U_apdone_blk, "regslice_both_dout_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_dout_V_last_V_U_ack_in_dummy, "regslice_both_dout_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_dout_V_last_V_U_vld_out, "regslice_both_dout_V_last_V_U_vld_out");
    sc_trace(mVcdFile, ap_condition_97, "ap_condition_97");
#endif

    }
}

Loop_realfft_be_stre::~Loop_realfft_be_stre() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_dout_V_data_U;
    delete regslice_both_dout_V_last_V_U;
}

void Loop_realfft_be_stre::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, dout_val_last_V_reg_248_pp0_iter1_reg.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, dout_val_last_V_reg_248.read()))) {
        i4_0_i1_reg_156 = i_reg_243.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, dout_val_last_V_reg_248.read())))) {
        i4_0_i1_reg_156 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dout_val_last_V_reg_248 = dout_val_last_V_fu_202_p2.read();
        dout_val_last_V_reg_248_pp0_iter1_reg = dout_val_last_V_reg_248.read();
        tmp_reg_239 = ap_phi_mux_i4_0_i1_phi_fu_160_p6.read().range(8, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_243 = i_fu_196_p2.read();
    }
}

void Loop_realfft_be_stre::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Loop_realfft_be_stre::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_realfft_be_stre::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_realfft_be_stre::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op32.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_dout_V_data_U_apdone_blk.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void Loop_realfft_be_stre::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op32.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read())) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY_int.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_dout_V_data_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY_int.read()))));
}

void Loop_realfft_be_stre::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op32.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read())) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY_int.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_dout_V_data_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dout_TREADY_int.read()))));
}

void Loop_realfft_be_stre::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_realfft_be_stre::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_realfft_be_stre::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_dout_V_data_U_apdone_blk.read());
}

void Loop_realfft_be_stre::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
  esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op32.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read())));
}

void Loop_realfft_be_stre::thread_ap_condition_97() {
    ap_condition_97 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void Loop_realfft_be_stre::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, dout_val_last_V_reg_248_pp0_iter1_reg.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_realfft_be_stre::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_realfft_be_stre::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void Loop_realfft_be_stre::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_ap_phi_mux_i4_0_i1_phi_fu_160_p6() {
    if (esl_seteq<1,1,1>(ap_condition_97.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, dout_val_last_V_reg_248.read())) {
            ap_phi_mux_i4_0_i1_phi_fu_160_p6 = ap_const_lv9_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, dout_val_last_V_reg_248.read())) {
            ap_phi_mux_i4_0_i1_phi_fu_160_p6 = i_reg_243.read();
        } else {
            ap_phi_mux_i4_0_i1_phi_fu_160_p6 = i4_0_i1_reg_156.read();
        }
    } else {
        ap_phi_mux_i4_0_i1_phi_fu_160_p6 = i4_0_i1_reg_156.read();
    }
}

void Loop_realfft_be_stre::thread_ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read())) {
        ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 = real_spectrum_hi_V_M_imag_V_dout.read();
    } else if (esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) {
        ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 = real_spectrum_lo_V_M_imag_V_dout.read();
    } else {
        ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 = ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170.read();
    }
}

void Loop_realfft_be_stre::thread_ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read())) {
        ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 = real_spectrum_hi_V_M_real_V_dout.read();
    } else if (esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0)) {
        ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 = real_spectrum_lo_V_M_real_V_dout.read();
    } else {
        ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 = ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179.read();
    }
}

void Loop_realfft_be_stre::thread_ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170() {
    ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void Loop_realfft_be_stre::thread_ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179() {
    ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void Loop_realfft_be_stre::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(dout_val_last_V_fu_202_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_dout_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        dout_TDATA_blk_n = dout_TREADY_int.read();
    } else {
        dout_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_stre::thread_dout_TDATA_int() {
    dout_TDATA_int = esl_concat<16,16>(ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4.read(), ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4.read());
}

void Loop_realfft_be_stre::thread_dout_TVALID() {
    dout_TVALID = regslice_both_dout_V_data_U_vld_out.read();
}

void Loop_realfft_be_stre::thread_dout_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dout_TVALID_int = ap_const_logic_1;
    } else {
        dout_TVALID_int = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_dout_val_last_V_fu_202_p2() {
    dout_val_last_V_fu_202_p2 = (!ap_phi_mux_i4_0_i1_phi_fu_160_p6.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i4_0_i1_phi_fu_160_p6.read() == ap_const_lv9_1FF);
}

void Loop_realfft_be_stre::thread_i_fu_196_p2() {
    i_fu_196_p2 = (!ap_phi_mux_i4_0_i1_phi_fu_160_p6.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(ap_phi_mux_i4_0_i1_phi_fu_160_p6.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void Loop_realfft_be_stre::thread_io_acc_block_signal_op28() {
    io_acc_block_signal_op28 = (real_spectrum_lo_V_M_real_V_empty_n.read() & real_spectrum_lo_V_M_imag_V_empty_n.read());
}

void Loop_realfft_be_stre::thread_io_acc_block_signal_op32() {
    io_acc_block_signal_op32 = (real_spectrum_hi_V_M_real_V_empty_n.read() & real_spectrum_hi_V_M_imag_V_empty_n.read());
}

void Loop_realfft_be_stre::thread_real_spectrum_hi_V_M_imag_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        real_spectrum_hi_V_M_imag_V_blk_n = real_spectrum_hi_V_M_imag_V_empty_n.read();
    } else {
        real_spectrum_hi_V_M_imag_V_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_hi_V_M_imag_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        real_spectrum_hi_V_M_imag_V_read = ap_const_logic_1;
    } else {
        real_spectrum_hi_V_M_imag_V_read = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_hi_V_M_real_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        real_spectrum_hi_V_M_real_V_blk_n = real_spectrum_hi_V_M_real_V_empty_n.read();
    } else {
        real_spectrum_hi_V_M_real_V_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_hi_V_M_real_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_239.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        real_spectrum_hi_V_M_real_V_read = ap_const_logic_1;
    } else {
        real_spectrum_hi_V_M_real_V_read = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_lo_V_M_imag_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        real_spectrum_lo_V_M_imag_V_blk_n = real_spectrum_lo_V_M_imag_V_empty_n.read();
    } else {
        real_spectrum_lo_V_M_imag_V_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_lo_V_M_imag_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        real_spectrum_lo_V_M_imag_V_read = ap_const_logic_1;
    } else {
        real_spectrum_lo_V_M_imag_V_read = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_lo_V_M_real_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        real_spectrum_lo_V_M_real_V_blk_n = real_spectrum_lo_V_M_real_V_empty_n.read();
    } else {
        real_spectrum_lo_V_M_real_V_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_stre::thread_real_spectrum_lo_V_M_real_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(tmp_reg_239.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        real_spectrum_lo_V_M_real_V_read = ap_const_logic_1;
    } else {
        real_spectrum_lo_V_M_real_V_read = ap_const_logic_0;
    }
}

void Loop_realfft_be_stre::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

