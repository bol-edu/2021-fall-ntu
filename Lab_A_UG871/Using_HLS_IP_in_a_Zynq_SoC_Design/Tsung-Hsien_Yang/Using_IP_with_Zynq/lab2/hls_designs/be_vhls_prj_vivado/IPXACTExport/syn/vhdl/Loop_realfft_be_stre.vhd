-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_realfft_be_stre is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_spectrum_lo_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_lo_V_M_real_V_empty_n : IN STD_LOGIC;
    real_spectrum_lo_V_M_real_V_read : OUT STD_LOGIC;
    real_spectrum_lo_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_lo_V_M_imag_V_empty_n : IN STD_LOGIC;
    real_spectrum_lo_V_M_imag_V_read : OUT STD_LOGIC;
    real_spectrum_hi_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_V_M_real_V_empty_n : IN STD_LOGIC;
    real_spectrum_hi_V_M_real_V_read : OUT STD_LOGIC;
    real_spectrum_hi_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_V_M_imag_V_empty_n : IN STD_LOGIC;
    real_spectrum_hi_V_M_imag_V_read : OUT STD_LOGIC;
    dout_TREADY : IN STD_LOGIC;
    dout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_TVALID : OUT STD_LOGIC;
    dout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_realfft_be_stre is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dout_val_last_V_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal tmp_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal regslice_both_dout_V_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dout_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal real_spectrum_lo_V_M_real_V_blk_n : STD_LOGIC;
    signal real_spectrum_lo_V_M_imag_V_blk_n : STD_LOGIC;
    signal real_spectrum_hi_V_M_real_V_blk_n : STD_LOGIC;
    signal real_spectrum_hi_V_M_imag_V_blk_n : STD_LOGIC;
    signal i4_0_i1_reg_156 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_243 : STD_LOGIC_VECTOR (8 downto 0);
    signal dout_val_last_V_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_val_last_V_reg_248_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_i4_0_i1_phi_fu_160_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal dout_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_TVALID_int : STD_LOGIC;
    signal dout_TREADY_int : STD_LOGIC;
    signal regslice_both_dout_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_dout_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dout_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dout_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_97 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_dout_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_TDATA_int,
        vld_in => dout_TVALID_int,
        ack_in => dout_TREADY_int,
        data_out => dout_TDATA,
        vld_out => regslice_both_dout_V_data_U_vld_out,
        ack_out => dout_TREADY,
        apdone_blk => regslice_both_dout_V_data_U_apdone_blk);

    regslice_both_dout_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_val_last_V_reg_248,
        vld_in => dout_TVALID_int,
        ack_in => regslice_both_dout_V_last_V_U_ack_in_dummy,
        data_out => dout_TLAST,
        vld_out => regslice_both_dout_V_last_V_U_vld_out,
        ack_out => dout_TREADY,
        apdone_blk => regslice_both_dout_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_248_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_0_i1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_248 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i4_0_i1_reg_156 <= i_reg_243;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_248 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i4_0_i1_reg_156 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dout_val_last_V_reg_248 <= dout_val_last_V_fu_202_p2;
                dout_val_last_V_reg_248_pp0_iter1_reg <= dout_val_last_V_reg_248;
                tmp_reg_239 <= ap_phi_mux_i4_0_i1_phi_fu_160_p6(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_243 <= i_fu_196_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, io_acc_block_signal_op28, tmp_reg_239, io_acc_block_signal_op32, ap_enable_reg_pp0_iter1, regslice_both_dout_V_data_U_apdone_blk, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (regslice_both_dout_V_data_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op32 = ap_const_logic_0) and (tmp_reg_239 = ap_const_lv1_1)) or ((tmp_reg_239 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, io_acc_block_signal_op28, tmp_reg_239, io_acc_block_signal_op32, ap_enable_reg_pp0_iter1, regslice_both_dout_V_data_U_apdone_blk, ap_enable_reg_pp0_iter2, dout_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dout_TREADY_int = ap_const_logic_0) or (regslice_both_dout_V_data_U_apdone_blk = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dout_TREADY_int = ap_const_logic_0) or ((io_acc_block_signal_op32 = ap_const_logic_0) and (tmp_reg_239 = ap_const_lv1_1)) or ((tmp_reg_239 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, io_acc_block_signal_op28, tmp_reg_239, io_acc_block_signal_op32, ap_enable_reg_pp0_iter1, regslice_both_dout_V_data_U_apdone_blk, ap_enable_reg_pp0_iter2, dout_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dout_TREADY_int = ap_const_logic_0) or (regslice_both_dout_V_data_U_apdone_blk = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((dout_TREADY_int = ap_const_logic_0) or ((io_acc_block_signal_op32 = ap_const_logic_0) and (tmp_reg_239 = ap_const_lv1_1)) or ((tmp_reg_239 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_dout_V_data_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_dout_V_data_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(io_acc_block_signal_op28, tmp_reg_239, io_acc_block_signal_op32)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((io_acc_block_signal_op32 = ap_const_logic_0) and (tmp_reg_239 = ap_const_lv1_1)) or ((tmp_reg_239 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)));
    end process;


    ap_condition_97_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_97 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, dout_val_last_V_reg_248_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_reg_248_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i4_0_i1_phi_fu_160_p6_assign_proc : process(i4_0_i1_reg_156, i_reg_243, dout_val_last_V_reg_248, ap_condition_97)
    begin
        if ((ap_const_boolean_1 = ap_condition_97)) then
            if ((dout_val_last_V_reg_248 = ap_const_lv1_1)) then 
                ap_phi_mux_i4_0_i1_phi_fu_160_p6 <= ap_const_lv9_0;
            elsif ((dout_val_last_V_reg_248 = ap_const_lv1_0)) then 
                ap_phi_mux_i4_0_i1_phi_fu_160_p6 <= i_reg_243;
            else 
                ap_phi_mux_i4_0_i1_phi_fu_160_p6 <= i4_0_i1_reg_156;
            end if;
        else 
            ap_phi_mux_i4_0_i1_phi_fu_160_p6 <= i4_0_i1_reg_156;
        end if; 
    end process;


    ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4_assign_proc : process(real_spectrum_lo_V_M_imag_V_dout, tmp_reg_239, real_spectrum_hi_V_M_imag_V_dout, ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170)
    begin
        if ((tmp_reg_239 = ap_const_lv1_1)) then 
            ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 <= real_spectrum_hi_V_M_imag_V_dout;
        elsif ((tmp_reg_239 = ap_const_lv1_0)) then 
            ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 <= real_spectrum_lo_V_M_imag_V_dout;
        else 
            ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170;
        end if; 
    end process;


    ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4_assign_proc : process(real_spectrum_lo_V_M_real_V_dout, tmp_reg_239, real_spectrum_hi_V_M_real_V_dout, ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179)
    begin
        if ((tmp_reg_239 = ap_const_lv1_1)) then 
            ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 <= real_spectrum_hi_V_M_real_V_dout;
        elsif ((tmp_reg_239 = ap_const_lv1_0)) then 
            ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 <= real_spectrum_lo_V_M_real_V_dout;
        else 
            ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4 <= ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_tmp_data_M_imag_V_reg_170 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_tmp_data_M_real_V_reg_179 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(dout_val_last_V_fu_202_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (dout_val_last_V_fu_202_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    dout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, dout_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dout_TDATA_blk_n <= dout_TREADY_int;
        else 
            dout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_TDATA_int <= (ap_phi_mux_tmp_data_M_imag_V_phi_fu_173_p4 & ap_phi_mux_tmp_data_M_real_V_phi_fu_182_p4);
    dout_TVALID <= regslice_both_dout_V_data_U_vld_out;

    dout_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_TVALID_int <= ap_const_logic_1;
        else 
            dout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    dout_val_last_V_fu_202_p2 <= "1" when (ap_phi_mux_i4_0_i1_phi_fu_160_p6 = ap_const_lv9_1FF) else "0";
    i_fu_196_p2 <= std_logic_vector(unsigned(ap_phi_mux_i4_0_i1_phi_fu_160_p6) + unsigned(ap_const_lv9_1));
    io_acc_block_signal_op28 <= (real_spectrum_lo_V_M_real_V_empty_n and real_spectrum_lo_V_M_imag_V_empty_n);
    io_acc_block_signal_op32 <= (real_spectrum_hi_V_M_real_V_empty_n and real_spectrum_hi_V_M_imag_V_empty_n);

    real_spectrum_hi_V_M_imag_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, real_spectrum_hi_V_M_imag_V_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_239 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_imag_V_blk_n <= real_spectrum_hi_V_M_imag_V_empty_n;
        else 
            real_spectrum_hi_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_hi_V_M_imag_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_239 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_imag_V_read <= ap_const_logic_1;
        else 
            real_spectrum_hi_V_M_imag_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_hi_V_M_real_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, real_spectrum_hi_V_M_real_V_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_239 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_real_V_blk_n <= real_spectrum_hi_V_M_real_V_empty_n;
        else 
            real_spectrum_hi_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_hi_V_M_real_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_239 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_V_M_real_V_read <= ap_const_logic_1;
        else 
            real_spectrum_hi_V_M_real_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_lo_V_M_imag_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, real_spectrum_lo_V_M_imag_V_empty_n, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_imag_V_blk_n <= real_spectrum_lo_V_M_imag_V_empty_n;
        else 
            real_spectrum_lo_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_lo_V_M_imag_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_imag_V_read <= ap_const_logic_1;
        else 
            real_spectrum_lo_V_M_imag_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_lo_V_M_real_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, real_spectrum_lo_V_M_real_V_empty_n, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_real_V_blk_n <= real_spectrum_lo_V_M_real_V_empty_n;
        else 
            real_spectrum_lo_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_lo_V_M_real_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_239, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_V_M_real_V_read <= ap_const_logic_1;
        else 
            real_spectrum_lo_V_M_real_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
