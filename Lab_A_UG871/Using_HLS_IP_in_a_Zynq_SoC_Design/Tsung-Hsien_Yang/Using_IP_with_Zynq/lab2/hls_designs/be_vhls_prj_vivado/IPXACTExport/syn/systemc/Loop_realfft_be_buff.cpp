// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_realfft_be_buff.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_realfft_be_buff::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_realfft_be_buff::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Loop_realfft_be_buff::ap_ST_fsm_state1 = "1";
const sc_lv<2> Loop_realfft_be_buff::ap_ST_fsm_state2 = "10";
const sc_lv<32> Loop_realfft_be_buff::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_realfft_be_buff::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_realfft_be_buff::ap_const_lv1_1 = "1";
const sc_lv<1> Loop_realfft_be_buff::ap_const_lv1_0 = "0";
const sc_lv<9> Loop_realfft_be_buff::ap_const_lv9_0 = "000000000";
const sc_lv<32> Loop_realfft_be_buff::ap_const_lv32_8 = "1000";
const sc_lv<9> Loop_realfft_be_buff::ap_const_lv9_1 = "1";
const sc_lv<32> Loop_realfft_be_buff::ap_const_lv32_10 = "10000";
const sc_lv<32> Loop_realfft_be_buff::ap_const_lv32_1F = "11111";
const sc_lv<9> Loop_realfft_be_buff::ap_const_lv9_1FF = "111111111";
const bool Loop_realfft_be_buff::ap_const_boolean_1 = true;

Loop_realfft_be_buff::Loop_realfft_be_buff(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_din_V_data_U = new regslice_both<32>("regslice_both_din_V_data_U");
    regslice_both_din_V_data_U->ap_clk(ap_clk);
    regslice_both_din_V_data_U->ap_rst(ap_rst);
    regslice_both_din_V_data_U->data_in(din_TDATA);
    regslice_both_din_V_data_U->vld_in(din_TVALID);
    regslice_both_din_V_data_U->ack_in(regslice_both_din_V_data_U_ack_in);
    regslice_both_din_V_data_U->data_out(din_TDATA_int);
    regslice_both_din_V_data_U->vld_out(din_TVALID_int);
    regslice_both_din_V_data_U->ack_out(din_TREADY_int);
    regslice_both_din_V_data_U->apdone_blk(regslice_both_din_V_data_U_apdone_blk);
    regslice_both_din_V_last_V_U = new regslice_both<1>("regslice_both_din_V_last_V_U");
    regslice_both_din_V_last_V_U->ap_clk(ap_clk);
    regslice_both_din_V_last_V_U->ap_rst(ap_rst);
    regslice_both_din_V_last_V_U->data_in(din_TLAST);
    regslice_both_din_V_last_V_U->vld_in(din_TVALID);
    regslice_both_din_V_last_V_U->ack_in(regslice_both_din_V_last_V_U_ack_in);
    regslice_both_din_V_last_V_U->data_out(din_TLAST_int);
    regslice_both_din_V_last_V_U->vld_out(regslice_both_din_V_last_V_U_vld_out);
    regslice_both_din_V_last_V_U->ack_out(din_TREADY_int);
    regslice_both_din_V_last_V_U->apdone_blk(regslice_both_din_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln78_fu_209_p2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln78_fu_209_p2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_0_M_imag_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln203_fu_169_p1 );

    SC_METHOD(thread_descramble_buf_0_M_imag_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_0_M_imag_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TDATA_int );

    SC_METHOD(thread_descramble_buf_0_M_imag_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_9_fu_183_p3 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_0_M_real_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln203_fu_169_p1 );

    SC_METHOD(thread_descramble_buf_0_M_real_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_0_M_real_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln203_fu_177_p1 );

    SC_METHOD(thread_descramble_buf_0_M_real_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_9_fu_183_p3 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_1_M_imag_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln203_fu_169_p1 );

    SC_METHOD(thread_descramble_buf_1_M_imag_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_1_M_imag_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TDATA_int );

    SC_METHOD(thread_descramble_buf_1_M_imag_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_9_fu_183_p3 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_1_M_real_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln203_fu_169_p1 );

    SC_METHOD(thread_descramble_buf_1_M_real_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_descramble_buf_1_M_real_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln203_fu_177_p1 );

    SC_METHOD(thread_descramble_buf_1_M_real_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_9_fu_183_p3 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_din_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_din_TREADY);
    sensitive << ( din_TVALID );
    sensitive << ( regslice_both_din_V_data_U_ack_in );

    SC_METHOD(thread_din_TREADY_int);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_i_fu_191_p2);
    sensitive << ( val_assign41_reg_141 );

    SC_METHOD(thread_icmp_ln78_fu_209_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( val_assign41_reg_141 );
    sensitive << ( din_TVALID_int );

    SC_METHOD(thread_tmp_9_fu_183_p3);
    sensitive << ( val_assign41_reg_141 );

    SC_METHOD(thread_trunc_ln203_fu_177_p1);
    sensitive << ( din_TDATA_int );

    SC_METHOD(thread_trunc_ln_fu_159_p4);
    sensitive << ( val_assign41_reg_141 );

    SC_METHOD(thread_zext_ln203_fu_169_p1);
    sensitive << ( trunc_ln_fu_159_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln78_fu_209_p2 );
    sensitive << ( din_TVALID_int );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_realfft_be_buff_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, descramble_buf_0_M_imag_V_address0, "(port)descramble_buf_0_M_imag_V_address0");
    sc_trace(mVcdFile, descramble_buf_0_M_imag_V_ce0, "(port)descramble_buf_0_M_imag_V_ce0");
    sc_trace(mVcdFile, descramble_buf_0_M_imag_V_we0, "(port)descramble_buf_0_M_imag_V_we0");
    sc_trace(mVcdFile, descramble_buf_0_M_imag_V_d0, "(port)descramble_buf_0_M_imag_V_d0");
    sc_trace(mVcdFile, descramble_buf_1_M_imag_V_address0, "(port)descramble_buf_1_M_imag_V_address0");
    sc_trace(mVcdFile, descramble_buf_1_M_imag_V_ce0, "(port)descramble_buf_1_M_imag_V_ce0");
    sc_trace(mVcdFile, descramble_buf_1_M_imag_V_we0, "(port)descramble_buf_1_M_imag_V_we0");
    sc_trace(mVcdFile, descramble_buf_1_M_imag_V_d0, "(port)descramble_buf_1_M_imag_V_d0");
    sc_trace(mVcdFile, din_TDATA, "(port)din_TDATA");
    sc_trace(mVcdFile, din_TVALID, "(port)din_TVALID");
    sc_trace(mVcdFile, din_TREADY, "(port)din_TREADY");
    sc_trace(mVcdFile, din_TLAST, "(port)din_TLAST");
    sc_trace(mVcdFile, descramble_buf_0_M_real_V_address0, "(port)descramble_buf_0_M_real_V_address0");
    sc_trace(mVcdFile, descramble_buf_0_M_real_V_ce0, "(port)descramble_buf_0_M_real_V_ce0");
    sc_trace(mVcdFile, descramble_buf_0_M_real_V_we0, "(port)descramble_buf_0_M_real_V_we0");
    sc_trace(mVcdFile, descramble_buf_0_M_real_V_d0, "(port)descramble_buf_0_M_real_V_d0");
    sc_trace(mVcdFile, descramble_buf_1_M_real_V_address0, "(port)descramble_buf_1_M_real_V_address0");
    sc_trace(mVcdFile, descramble_buf_1_M_real_V_ce0, "(port)descramble_buf_1_M_real_V_ce0");
    sc_trace(mVcdFile, descramble_buf_1_M_real_V_we0, "(port)descramble_buf_1_M_real_V_we0");
    sc_trace(mVcdFile, descramble_buf_1_M_real_V_d0, "(port)descramble_buf_1_M_real_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, din_TDATA_blk_n, "din_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_191_p2, "i_fu_191_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, icmp_ln78_fu_209_p2, "icmp_ln78_fu_209_p2");
    sc_trace(mVcdFile, val_assign41_reg_141, "val_assign41_reg_141");
    sc_trace(mVcdFile, zext_ln203_fu_169_p1, "zext_ln203_fu_169_p1");
    sc_trace(mVcdFile, tmp_9_fu_183_p3, "tmp_9_fu_183_p3");
    sc_trace(mVcdFile, trunc_ln203_fu_177_p1, "trunc_ln203_fu_177_p1");
    sc_trace(mVcdFile, trunc_ln_fu_159_p4, "trunc_ln_fu_159_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_din_V_data_U_apdone_blk, "regslice_both_din_V_data_U_apdone_blk");
    sc_trace(mVcdFile, din_TDATA_int, "din_TDATA_int");
    sc_trace(mVcdFile, din_TVALID_int, "din_TVALID_int");
    sc_trace(mVcdFile, din_TREADY_int, "din_TREADY_int");
    sc_trace(mVcdFile, regslice_both_din_V_data_U_ack_in, "regslice_both_din_V_data_U_ack_in");
    sc_trace(mVcdFile, regslice_both_din_V_last_V_U_apdone_blk, "regslice_both_din_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, din_TLAST_int, "din_TLAST_int");
    sc_trace(mVcdFile, regslice_both_din_V_last_V_U_vld_out, "regslice_both_din_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_din_V_last_V_U_ack_in, "regslice_both_din_V_last_V_U_ack_in");
#endif

    }
}

Loop_realfft_be_buff::~Loop_realfft_be_buff() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_din_V_data_U;
    delete regslice_both_din_V_last_V_U;
}

void Loop_realfft_be_buff::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_209_p2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln78_fu_209_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        val_assign41_reg_141 = i_fu_191_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_209_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read()))))) {
        val_assign41_reg_141 = ap_const_lv9_0;
    }
}

void Loop_realfft_be_buff::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_realfft_be_buff::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_realfft_be_buff::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_realfft_be_buff::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read()));
}

void Loop_realfft_be_buff::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_209_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_realfft_be_buff::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_209_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_imag_V_address0() {
    descramble_buf_0_M_imag_V_address0 =  (sc_lv<8>) (zext_ln203_fu_169_p1.read());
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_imag_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_0_M_imag_V_ce0 = ap_const_logic_1;
    } else {
        descramble_buf_0_M_imag_V_ce0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_imag_V_d0() {
    descramble_buf_0_M_imag_V_d0 = din_TDATA_int.read().range(31, 16);
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_imag_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_183_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_0_M_imag_V_we0 = ap_const_logic_1;
    } else {
        descramble_buf_0_M_imag_V_we0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_real_V_address0() {
    descramble_buf_0_M_real_V_address0 =  (sc_lv<8>) (zext_ln203_fu_169_p1.read());
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_real_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_0_M_real_V_ce0 = ap_const_logic_1;
    } else {
        descramble_buf_0_M_real_V_ce0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_real_V_d0() {
    descramble_buf_0_M_real_V_d0 = trunc_ln203_fu_177_p1.read();
}

void Loop_realfft_be_buff::thread_descramble_buf_0_M_real_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_183_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_0_M_real_V_we0 = ap_const_logic_1;
    } else {
        descramble_buf_0_M_real_V_we0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_imag_V_address0() {
    descramble_buf_1_M_imag_V_address0 =  (sc_lv<8>) (zext_ln203_fu_169_p1.read());
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_imag_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_1_M_imag_V_ce0 = ap_const_logic_1;
    } else {
        descramble_buf_1_M_imag_V_ce0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_imag_V_d0() {
    descramble_buf_1_M_imag_V_d0 = din_TDATA_int.read().range(31, 16);
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_imag_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_183_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_1_M_imag_V_we0 = ap_const_logic_1;
    } else {
        descramble_buf_1_M_imag_V_we0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_real_V_address0() {
    descramble_buf_1_M_real_V_address0 =  (sc_lv<8>) (zext_ln203_fu_169_p1.read());
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_real_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_1_M_real_V_ce0 = ap_const_logic_1;
    } else {
        descramble_buf_1_M_real_V_ce0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_real_V_d0() {
    descramble_buf_1_M_real_V_d0 = trunc_ln203_fu_177_p1.read();
}

void Loop_realfft_be_buff::thread_descramble_buf_1_M_real_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_183_p3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        descramble_buf_1_M_real_V_we0 = ap_const_logic_1;
    } else {
        descramble_buf_1_M_real_V_we0 = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_din_TDATA_blk_n() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        din_TDATA_blk_n = din_TVALID_int.read();
    } else {
        din_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_realfft_be_buff::thread_din_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, din_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_din_V_data_U_ack_in.read()))) {
        din_TREADY = ap_const_logic_1;
    } else {
        din_TREADY = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_din_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
        din_TREADY_int = ap_const_logic_1;
    } else {
        din_TREADY_int = ap_const_logic_0;
    }
}

void Loop_realfft_be_buff::thread_i_fu_191_p2() {
    i_fu_191_p2 = (!ap_const_lv9_1.is_01() || !val_assign41_reg_141.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_1) + sc_biguint<9>(val_assign41_reg_141.read()));
}

void Loop_realfft_be_buff::thread_icmp_ln78_fu_209_p2() {
    icmp_ln78_fu_209_p2 = (!val_assign41_reg_141.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<1>(): sc_lv<1>(val_assign41_reg_141.read() == ap_const_lv9_1FF);
}

void Loop_realfft_be_buff::thread_tmp_9_fu_183_p3() {
    tmp_9_fu_183_p3 = val_assign41_reg_141.read().range(0, 0);
}

void Loop_realfft_be_buff::thread_trunc_ln203_fu_177_p1() {
    trunc_ln203_fu_177_p1 = din_TDATA_int.read().range(16-1, 0);
}

void Loop_realfft_be_buff::thread_trunc_ln_fu_159_p4() {
    trunc_ln_fu_159_p4 = val_assign41_reg_141.read().range(1, 8);
}

void Loop_realfft_be_buff::thread_zext_ln203_fu_169_p1() {
    zext_ln203_fu_169_p1 = esl_zext<64,8>(trunc_ln_fu_159_p4.read());
}

void Loop_realfft_be_buff::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_209_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, din_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

