-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Loop_realfft_be_dbkb_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Loop_realfft_be_dbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "111111111111111", 2 => "111111111111101", 3 => "111111111111010", 
    4 => "111111111110110", 5 => "111111111110000", 6 => "111111111101001", 
    7 => "111111111100001", 8 => "111111111011000", 9 => "111111111001110", 
    10 => "111111111000010", 11 => "111111110110101", 12 => "111111110100111", 
    13 => "111111110010111", 14 => "111111110000111", 15 => "111111101110101", 
    16 => "111111101100010", 17 => "111111101001101", 18 => "111111100111000", 
    19 => "111111100100001", 20 => "111111100001001", 21 => "111111011110000", 
    22 => "111111011010101", 23 => "111111010111010", 24 => "111111010011101", 
    25 => "111111001111111", 26 => "111111001011111", 27 => "111111000111111", 
    28 => "111111000011101", 29 => "111110111111010", 30 => "111110111010110", 
    31 => "111110110110000", 32 => "111110110001010", 33 => "111110101100010", 
    34 => "111110100111001", 35 => "111110100001111", 36 => "111110011100011", 
    37 => "111110010110111", 38 => "111110010001001", 39 => "111110001011010", 
    40 => "111110000101001", 41 => "111101111111000", 42 => "111101111000101", 
    43 => "111101110010010", 44 => "111101101011101", 45 => "111101100100110", 
    46 => "111101011101111", 47 => "111101010110110", 48 => "111101001111101", 
    49 => "111101001000010", 50 => "111101000000101", 51 => "111100111001000", 
    52 => "111100110001010", 53 => "111100101001010", 54 => "111100100001001", 
    55 => "111100011000111", 56 => "111100010000100", 57 => "111100001000000", 
    58 => "111011111111010", 59 => "111011110110100", 60 => "111011101101100", 
    61 => "111011100100011", 62 => "111011011011001", 63 => "111011010001110", 
    64 => "111011001000001", 65 => "111010111110100", 66 => "111010110100101", 
    67 => "111010101010101", 68 => "111010100000100", 69 => "111010010110010", 
    70 => "111010001011111", 71 => "111010000001011", 72 => "111001110110101", 
    73 => "111001101011111", 74 => "111001100000111", 75 => "111001010101111", 
    76 => "111001001010101", 77 => "111000111111010", 78 => "111000110011110", 
    79 => "111000101000001", 80 => "111000011100010", 81 => "111000010000011", 
    82 => "111000000100011", 83 => "110111111000001", 84 => "110111101011111", 
    85 => "110111011111011", 86 => "110111010010110", 87 => "110111000110000", 
    88 => "110110111001010", 89 => "110110101100010", 90 => "110110011111001", 
    91 => "110110010001111", 92 => "110110000100100", 93 => "110101110111000", 
    94 => "110101101001010", 95 => "110101011011100", 96 => "110101001101101", 
    97 => "110100111111101", 98 => "110100110001100", 99 => "110100100011001", 
    100 => "110100010100110", 101 => "110100000110010", 102 => "110011110111101", 
    103 => "110011101000110", 104 => "110011011001111", 105 => "110011001010111", 
    106 => "110010111011101", 107 => "110010101100011", 108 => "110010011101000", 
    109 => "110010001101100", 110 => "110001111101111", 111 => "110001101110001", 
    112 => "110001011110010", 113 => "110001001110001", 114 => "110000111110001", 
    115 => "110000101101111", 116 => "110000011101100", 117 => "110000001101000", 
    118 => "101111111100011", 119 => "101111101011110", 120 => "101111011010111", 
    121 => "101111001010000", 122 => "101110111000111", 123 => "101110100111110", 
    124 => "101110010110100", 125 => "101110000101001", 126 => "101101110011101", 
    127 => "101101100010000", 128 => "101101010000010", 129 => "101100111110011", 
    130 => "101100101100100", 131 => "101100011010100", 132 => "101100001000010", 
    133 => "101011110110000", 134 => "101011100011101", 135 => "101011010001010", 
    136 => "101010111110101", 137 => "101010101100000", 138 => "101010011001010", 
    139 => "101010000110011", 140 => "101001110011011", 141 => "101001100000010", 
    142 => "101001001101001", 143 => "101000111001110", 144 => "101000100110011", 
    145 => "101000010010111", 146 => "100111111111011", 147 => "100111101011110", 
    148 => "100111010111111", 149 => "100111000100001", 150 => "100110110000001", 
    151 => "100110011100001", 152 => "100110000111111", 153 => "100101110011110", 
    154 => "100101011111011", 155 => "100101001011000", 156 => "100100110110100", 
    157 => "100100100001111", 158 => "100100001101001", 159 => "100011111000011", 
    160 => "100011100011100", 161 => "100011001110101", 162 => "100010111001101", 
    163 => "100010100100100", 164 => "100010001111010", 165 => "100001111010000", 
    166 => "100001100100101", 167 => "100001001111010", 168 => "100000111001110", 
    169 => "100000100100001", 170 => "100000001110011", 171 => "011111111000101", 
    172 => "011111100010111", 173 => "011111001101000", 174 => "011110110111000", 
    175 => "011110100000111", 176 => "011110001010110", 177 => "011101110100101", 
    178 => "011101011110010", 179 => "011101001000000", 180 => "011100110001100", 
    181 => "011100011011000", 182 => "011100000100100", 183 => "011011101101111", 
    184 => "011011010111010", 185 => "011011000000100", 186 => "011010101001101", 
    187 => "011010010010110", 188 => "011001111011110", 189 => "011001100100110", 
    190 => "011001001101110", 191 => "011000110110101", 192 => "011000011111011", 
    193 => "011000001000001", 194 => "010111110000111", 195 => "010111011001100", 
    196 => "010111000010001", 197 => "010110101010101", 198 => "010110010011000", 
    199 => "010101111011100", 200 => "010101100011111", 201 => "010101001100001", 
    202 => "010100110100011", 203 => "010100011100101", 204 => "010100000100110", 
    205 => "010011101100111", 206 => "010011010101000", 207 => "010010111101000", 
    208 => "010010100101000", 209 => "010010001100111", 210 => "010001110100110", 
    211 => "010001011100101", 212 => "010001000100011", 213 => "010000101100001", 
    214 => "010000010011111", 215 => "001111111011100", 216 => "001111100011001", 
    217 => "001111001010110", 218 => "001110110010011", 219 => "001110011001111", 
    220 => "001110000001011", 221 => "001101101000111", 222 => "001101010000010", 
    223 => "001100110111101", 224 => "001100011111000", 225 => "001100000110011", 
    226 => "001011101101101", 227 => "001011010101000", 228 => "001010111100010", 
    229 => "001010100011011", 230 => "001010001010101", 231 => "001001110001110", 
    232 => "001001011001000", 233 => "001001000000001", 234 => "001000100111001", 
    235 => "001000001110010", 236 => "000111110101011", 237 => "000111011100011", 
    238 => "000111000011011", 239 => "000110101010011", 240 => "000110010001011", 
    241 => "000101111000011", 242 => "000101011111011", 243 => "000101000110011", 
    244 => "000100101101010", 245 => "000100010100010", 246 => "000011111011001", 
    247 => "000011100010000", 248 => "000011001000111", 249 => "000010101111111", 
    250 => "000010010110110", 251 => "000001111101101", 252 => "000001100100100", 
    253 => "000001001011011", 254 => "000000110010010", 255 => "000000011001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Loop_realfft_be_dbkb is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Loop_realfft_be_dbkb is
    component Loop_realfft_be_dbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Loop_realfft_be_dbkb_rom_U :  component Loop_realfft_be_dbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


