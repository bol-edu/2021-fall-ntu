// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_real2xfft_outpu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        windowed_0_dout,
        windowed_0_empty_n,
        windowed_0_read,
        windowed_1_dout,
        windowed_1_empty_n,
        windowed_1_read,
        dout_TREADY,
        dout_TDATA,
        dout_TVALID,
        dout_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] windowed_0_dout;
input   windowed_0_empty_n;
output   windowed_0_read;
input  [15:0] windowed_1_dout;
input   windowed_1_empty_n;
output   windowed_1_read;
input   dout_TREADY;
output  [31:0] dout_TDATA;
output   dout_TVALID;
output  [0:0] dout_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg windowed_0_read;
reg windowed_1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_168_p3;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
wire    regslice_both_dout_V_data_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    windowed_0_blk_n;
wire    ap_block_pp0_stage0;
reg    windowed_1_blk_n;
reg    dout_TDATA_blk_n;
reg   [9:0] i_01_reg_124;
wire   [9:0] trunc_ln77_fu_164_p1;
reg   [9:0] trunc_ln77_reg_188;
reg   [0:0] tmp_reg_193;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [9:0] ap_phi_mux_i_01_phi_fu_128_p6;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] i_01_cast_fu_138_p1;
wire   [10:0] i_fu_158_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] dout_TDATA_int;
reg    dout_TVALID_int;
wire    dout_TREADY_int;
wire    regslice_both_dout_V_data_U_vld_out;
wire    regslice_both_dout_V_last_V_U_apdone_blk;
wire   [0:0] dout_TLAST_int;
wire    regslice_both_dout_V_last_V_U_ack_in_dummy;
wire    regslice_both_dout_V_last_V_U_vld_out;
reg    ap_condition_78;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dout_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dout_TDATA_int),
    .vld_in(dout_TVALID_int),
    .ack_in(dout_TREADY_int),
    .data_out(dout_TDATA),
    .vld_out(regslice_both_dout_V_data_U_vld_out),
    .ack_out(dout_TREADY),
    .apdone_blk(regslice_both_dout_V_data_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_dout_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dout_TLAST_int),
    .vld_in(dout_TVALID_int),
    .ack_in(regslice_both_dout_V_last_V_U_ack_in_dummy),
    .data_out(dout_TLAST),
    .vld_out(regslice_both_dout_V_last_V_U_vld_out),
    .ack_out(dout_TREADY),
    .apdone_blk(regslice_both_dout_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_193 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_193 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_01_reg_124 <= trunc_ln77_reg_188;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_193 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_01_reg_124 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_193 <= i_fu_158_p2[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln77_reg_188 <= trunc_ln77_fu_164_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_193 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_78)) begin
        if ((tmp_reg_193 == 1'd1)) begin
            ap_phi_mux_i_01_phi_fu_128_p6 = 10'd0;
        end else if ((tmp_reg_193 == 1'd0)) begin
            ap_phi_mux_i_01_phi_fu_128_p6 = trunc_ln77_reg_188;
        end else begin
            ap_phi_mux_i_01_phi_fu_128_p6 = i_01_reg_124;
        end
    end else begin
        ap_phi_mux_i_01_phi_fu_128_p6 = i_01_reg_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_168_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dout_TDATA_blk_n = dout_TREADY_int;
    end else begin
        dout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dout_TVALID_int = 1'b1;
    end else begin
        dout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_0_blk_n = windowed_0_empty_n;
    end else begin
        windowed_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_0_read = 1'b1;
    end else begin
        windowed_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_1_blk_n = windowed_1_empty_n;
    end else begin
        windowed_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_1_read = 1'b1;
    end else begin
        windowed_1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (regslice_both_dout_V_data_U_apdone_blk == 1'b1)) | ((ap_start == 1'b1) & ((windowed_1_empty_n == 1'b0) | (windowed_0_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dout_TREADY_int == 1'b0) | (regslice_both_dout_V_data_U_apdone_blk == 1'b1))) | ((ap_start == 1'b1) & ((windowed_1_empty_n == 1'b0) | (windowed_0_empty_n == 1'b0) | (dout_TREADY_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dout_TREADY_int == 1'b0) | (regslice_both_dout_V_data_U_apdone_blk == 1'b1))) | ((ap_start == 1'b1) & ((windowed_1_empty_n == 1'b0) | (windowed_0_empty_n == 1'b0) | (dout_TREADY_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((windowed_1_empty_n == 1'b0) | (windowed_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (regslice_both_dout_V_data_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_condition_78 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign dout_TDATA_int = {{windowed_1_dout}, {windowed_0_dout}};

assign dout_TLAST_int = ((ap_phi_mux_i_01_phi_fu_128_p6 == 10'd1022) ? 1'b1 : 1'b0);

assign dout_TVALID = regslice_both_dout_V_data_U_vld_out;

assign i_01_cast_fu_138_p1 = ap_phi_mux_i_01_phi_fu_128_p6;

assign i_fu_158_p2 = (11'd2 + i_01_cast_fu_138_p1);

assign tmp_fu_168_p3 = i_fu_158_p2[32'd10];

assign trunc_ln77_fu_164_p1 = i_fu_158_p2[9:0];

endmodule //Loop_real2xfft_outpu
