// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        indata_address0,
        indata_ce0,
        indata_q0,
        indata1_address0,
        indata1_ce0,
        indata1_q0,
        outdata_address0,
        outdata_ce0,
        outdata_we0,
        outdata_d0,
        outdata2_address0,
        outdata2_ce0,
        outdata2_we0,
        outdata2_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [8:0] indata_address0;
output   indata_ce0;
input  [15:0] indata_q0;
output  [8:0] indata1_address0;
output   indata1_ce0;
input  [15:0] indata1_q0;
output  [8:0] outdata_address0;
output   outdata_ce0;
output   outdata_we0;
output  [15:0] outdata_d0;
output  [8:0] outdata2_address0;
output   outdata2_ce0;
output   outdata2_we0;
output  [15:0] outdata2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg indata_ce0;
reg indata1_ce0;
reg outdata_ce0;
reg outdata_we0;
reg outdata2_ce0;
reg outdata2_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_174_p3;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] coeff_tab_0_address0;
reg    coeff_tab_0_ce0;
wire   [14:0] coeff_tab_0_q0;
wire   [8:0] coeff_tab_1_address0;
reg    coeff_tab_1_ce0;
wire   [14:0] coeff_tab_1_q0;
reg   [9:0] i33_reg_128;
wire   [63:0] zext_ln1116_fu_156_p1;
reg   [63:0] zext_ln1116_reg_234;
reg   [63:0] zext_ln1116_reg_234_pp0_iter1_reg;
reg   [63:0] zext_ln1116_reg_234_pp0_iter2_reg;
reg   [63:0] zext_ln1116_reg_234_pp0_iter3_reg;
wire   [9:0] trunc_ln102_fu_170_p1;
reg   [9:0] trunc_ln102_reg_260;
reg   [0:0] tmp_reg_265;
reg   [0:0] tmp_reg_265_pp0_iter1_reg;
reg   [0:0] tmp_reg_265_pp0_iter2_reg;
reg   [0:0] tmp_reg_265_pp0_iter3_reg;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] ap_phi_mux_i33_phi_fu_132_p6;
wire    ap_block_pp0_stage0;
wire   [8:0] lshr_ln_fu_146_p4;
wire   [10:0] i33_cast_fu_142_p1;
wire   [10:0] i_fu_164_p2;
wire  signed [30:0] grp_fu_220_p2;
wire  signed [30:0] grp_fu_227_p2;
wire   [14:0] grp_fu_220_p1;
wire   [14:0] grp_fu_227_p1;
reg    grp_fu_220_ce;
reg    grp_fu_227_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [30:0] grp_fu_220_p10;
wire   [30:0] grp_fu_227_p10;
reg    ap_condition_150;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_dEe #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab_0_address0),
    .ce0(coeff_tab_0_ce0),
    .q0(coeff_tab_0_q0)
);

hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_eOg #(
    .DataWidth( 15 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
coeff_tab_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coeff_tab_1_address0),
    .ce0(coeff_tab_1_ce0),
    .q0(coeff_tab_1_q0)
);

hls_real2xfft_mul_mul_16s_15ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
mul_mul_16s_15ns_31_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata_q0),
    .din1(grp_fu_220_p1),
    .ce(grp_fu_220_ce),
    .dout(grp_fu_220_p2)
);

hls_real2xfft_mul_mul_16s_15ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
mul_mul_16s_15ns_31_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indata1_q0),
    .din1(grp_fu_227_p1),
    .ce(grp_fu_227_ce),
    .dout(grp_fu_227_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_reg_265_pp0_iter3_reg == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_265 == 1'd0))) begin
        i33_reg_128 <= trunc_ln102_reg_260;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_265 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i33_reg_128 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_265 <= i_fu_164_p2[32'd10];
        tmp_reg_265_pp0_iter1_reg <= tmp_reg_265;
        zext_ln1116_reg_234[8 : 0] <= zext_ln1116_fu_156_p1[8 : 0];
        zext_ln1116_reg_234_pp0_iter1_reg[8 : 0] <= zext_ln1116_reg_234[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_265_pp0_iter2_reg <= tmp_reg_265_pp0_iter1_reg;
        tmp_reg_265_pp0_iter3_reg <= tmp_reg_265_pp0_iter2_reg;
        zext_ln1116_reg_234_pp0_iter2_reg[8 : 0] <= zext_ln1116_reg_234_pp0_iter1_reg[8 : 0];
        zext_ln1116_reg_234_pp0_iter3_reg[8 : 0] <= zext_ln1116_reg_234_pp0_iter2_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln102_reg_260 <= trunc_ln102_fu_170_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_reg_265_pp0_iter3_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_150)) begin
        if ((tmp_reg_265 == 1'd1)) begin
            ap_phi_mux_i33_phi_fu_132_p6 = 10'd0;
        end else if ((tmp_reg_265 == 1'd0)) begin
            ap_phi_mux_i33_phi_fu_132_p6 = trunc_ln102_reg_260;
        end else begin
            ap_phi_mux_i33_phi_fu_132_p6 = i33_reg_128;
        end
    end else begin
        ap_phi_mux_i33_phi_fu_132_p6 = i33_reg_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_174_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_tab_0_ce0 = 1'b1;
    end else begin
        coeff_tab_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_tab_1_ce0 = 1'b1;
    end else begin
        coeff_tab_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_220_ce = 1'b1;
    end else begin
        grp_fu_220_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_227_ce = 1'b1;
    end else begin
        grp_fu_227_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indata1_ce0 = 1'b1;
    end else begin
        indata1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indata_ce0 = 1'b1;
    end else begin
        indata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outdata2_ce0 = 1'b1;
    end else begin
        outdata2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outdata2_we0 = 1'b1;
    end else begin
        outdata2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outdata_ce0 = 1'b1;
    end else begin
        outdata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outdata_we0 = 1'b1;
    end else begin
        outdata_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_150 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign coeff_tab_0_address0 = zext_ln1116_fu_156_p1;

assign coeff_tab_1_address0 = zext_ln1116_fu_156_p1;

assign grp_fu_220_p1 = grp_fu_220_p10;

assign grp_fu_220_p10 = coeff_tab_0_q0;

assign grp_fu_227_p1 = grp_fu_227_p10;

assign grp_fu_227_p10 = coeff_tab_1_q0;

assign i33_cast_fu_142_p1 = ap_phi_mux_i33_phi_fu_132_p6;

assign i_fu_164_p2 = (i33_cast_fu_142_p1 + 11'd2);

assign indata1_address0 = zext_ln1116_fu_156_p1;

assign indata_address0 = zext_ln1116_fu_156_p1;

assign lshr_ln_fu_146_p4 = {{ap_phi_mux_i33_phi_fu_132_p6[9:1]}};

assign outdata2_address0 = zext_ln1116_reg_234_pp0_iter3_reg;

assign outdata2_d0 = {{grp_fu_227_p2[30:15]}};

assign outdata_address0 = zext_ln1116_reg_234_pp0_iter3_reg;

assign outdata_d0 = {{grp_fu_220_p2[30:15]}};

assign tmp_fu_174_p3 = i_fu_164_p2[32'd10];

assign trunc_ln102_fu_170_p1 = i_fu_164_p2[9:0];

assign zext_ln1116_fu_156_p1 = lshr_ln_fu_146_p4;

always @ (posedge ap_clk) begin
    zext_ln1116_reg_234[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1116_reg_234_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1116_reg_234_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1116_reg_234_pp0_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_2_s
