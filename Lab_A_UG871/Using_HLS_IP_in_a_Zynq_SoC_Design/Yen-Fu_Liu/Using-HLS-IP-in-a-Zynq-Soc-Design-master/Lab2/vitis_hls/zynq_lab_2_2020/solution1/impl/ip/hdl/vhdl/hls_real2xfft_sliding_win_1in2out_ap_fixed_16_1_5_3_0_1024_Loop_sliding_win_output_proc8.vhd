-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_output_proc8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    delayed_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    delayed_V_empty_n : IN STD_LOGIC;
    delayed_V_read : OUT STD_LOGIC;
    nodelay_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nodelay_V_empty_n : IN STD_LOGIC;
    nodelay_V_read : OUT STD_LOGIC;
    dout1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dout1_ce0 : OUT STD_LOGIC;
    dout1_we0 : OUT STD_LOGIC;
    dout1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dout_ce0 : OUT STD_LOGIC;
    dout_we0 : OUT STD_LOGIC;
    dout_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_output_proc8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal nodelay_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal delayed_V_blk_n : STD_LOGIC;
    signal i15_reg_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal i15_reg_98_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal delayed_V_read_reg_204 : STD_LOGIC_VECTOR (15 downto 0);
    signal nodelay_V_read_reg_209 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln84_fu_141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln84_reg_214 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i15_phi_fu_102_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_dout_val_reg_113 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_dout_val_reg_113 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln93_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_1_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_2_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i15_cast_fu_131_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_135_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_fu_153_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln93_1_fu_168_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln93_2_fu_183_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_93 : BOOLEAN;
    signal ap_condition_159 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_1_reg_219 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_dout_val_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_dout_val_reg_113 <= nodelay_V_dout;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_dout_val_reg_113 <= delayed_V_dout;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_dout_val_reg_113 <= ap_phi_reg_pp0_iter0_dout_val_reg_113;
            end if; 
        end if;
    end process;

    i15_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_1_reg_219 = ap_const_lv1_0))) then 
                i15_reg_98 <= trunc_ln84_reg_214;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_1_reg_219 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i15_reg_98 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_200 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                delayed_V_read_reg_204 <= delayed_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i15_reg_98_pp0_iter1_reg <= i15_reg_98;
                tmp_reg_200 <= ap_phi_mux_i15_phi_fu_102_p6(9 downto 9);
                tmp_reg_200_pp0_iter1_reg <= tmp_reg_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_200 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                nodelay_V_read_reg_209 <= nodelay_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_1_reg_219 <= i_fu_135_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln84_reg_214 <= trunc_ln84_fu_141_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n)
    begin
                ap_block_state3_pp0_stage1_iter0 <= (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(delayed_V_empty_n, tmp_reg_200, nodelay_V_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((nodelay_V_empty_n = ap_const_logic_0) and (tmp_reg_200 = ap_const_lv1_1)) or ((tmp_reg_200 = ap_const_lv1_0) and (delayed_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_159_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_159 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_93_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_93 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, tmp_1_reg_219)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_1_reg_219 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i15_phi_fu_102_p6_assign_proc : process(i15_reg_98, trunc_ln84_reg_214, tmp_1_reg_219, ap_condition_93)
    begin
        if ((ap_const_boolean_1 = ap_condition_93)) then
            if ((tmp_1_reg_219 = ap_const_lv1_1)) then 
                ap_phi_mux_i15_phi_fu_102_p6 <= ap_const_lv10_0;
            elsif ((tmp_1_reg_219 = ap_const_lv1_0)) then 
                ap_phi_mux_i15_phi_fu_102_p6 <= trunc_ln84_reg_214;
            else 
                ap_phi_mux_i15_phi_fu_102_p6 <= i15_reg_98;
            end if;
        else 
            ap_phi_mux_i15_phi_fu_102_p6 <= i15_reg_98;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_dout_val_reg_113 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(tmp_1_fu_145_p3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_1_fu_145_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    delayed_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, delayed_V_empty_n, tmp_reg_200, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (tmp_reg_200 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delayed_V_blk_n <= delayed_V_empty_n;
        else 
            delayed_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    delayed_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_200, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_200 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delayed_V_read <= ap_const_logic_1;
        else 
            delayed_V_read <= ap_const_logic_0;
        end if; 
    end process;

    dout1_address0 <= zext_ln93_2_fu_193_p1(9 - 1 downto 0);

    dout1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dout1_ce0 <= ap_const_logic_1;
        else 
            dout1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dout1_d0 <= ap_phi_reg_pp0_iter1_dout_val_reg_113;

    dout1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dout1_we0 <= ap_const_logic_1;
        else 
            dout1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dout_address0_assign_proc : process(tmp_reg_200_pp0_iter1_reg, zext_ln93_fu_163_p1, zext_ln93_1_fu_178_p1, ap_condition_159)
    begin
        if ((ap_const_boolean_1 = ap_condition_159)) then
            if ((tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1)) then 
                dout_address0 <= zext_ln93_1_fu_178_p1(9 - 1 downto 0);
            elsif ((tmp_reg_200_pp0_iter1_reg = ap_const_lv1_0)) then 
                dout_address0 <= zext_ln93_fu_163_p1(9 - 1 downto 0);
            else 
                dout_address0 <= "XXXXXXXXX";
            end if;
        else 
            dout_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    dout_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, tmp_reg_200_pp0_iter1_reg)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_0)))) then 
            dout_ce0 <= ap_const_logic_1;
        else 
            dout_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dout_d0_assign_proc : process(tmp_reg_200_pp0_iter1_reg, delayed_V_read_reg_204, nodelay_V_read_reg_209, ap_condition_159)
    begin
        if ((ap_const_boolean_1 = ap_condition_159)) then
            if ((tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1)) then 
                dout_d0 <= nodelay_V_read_reg_209;
            elsif ((tmp_reg_200_pp0_iter1_reg = ap_const_lv1_0)) then 
                dout_d0 <= delayed_V_read_reg_204;
            else 
                dout_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            dout_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, tmp_reg_200_pp0_iter1_reg)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_0)))) then 
            dout_we0 <= ap_const_logic_1;
        else 
            dout_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i15_cast_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i15_reg_98),11));
    i_fu_135_p2 <= std_logic_vector(unsigned(i15_cast_fu_131_p1) + unsigned(ap_const_lv11_2));
    lshr_ln93_1_fu_168_p4 <= i15_reg_98_pp0_iter1_reg(9 downto 1);
    lshr_ln93_2_fu_183_p4 <= i15_reg_98_pp0_iter1_reg(9 downto 1);
    lshr_ln_fu_153_p4 <= i15_reg_98_pp0_iter1_reg(8 downto 1);

    nodelay_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_200, nodelay_V_empty_n, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (tmp_reg_200 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            nodelay_V_blk_n <= nodelay_V_empty_n;
        else 
            nodelay_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nodelay_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_reg_200, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_200 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_200 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            nodelay_V_read <= ap_const_logic_1;
        else 
            nodelay_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_145_p3 <= i_fu_135_p2(10 downto 10);
    trunc_ln84_fu_141_p1 <= i_fu_135_p2(10 - 1 downto 0);
    zext_ln93_1_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln93_1_fu_168_p4),64));
    zext_ln93_2_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln93_2_fu_183_p4),64));
    zext_ln93_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_153_p4),64));
end behav;
