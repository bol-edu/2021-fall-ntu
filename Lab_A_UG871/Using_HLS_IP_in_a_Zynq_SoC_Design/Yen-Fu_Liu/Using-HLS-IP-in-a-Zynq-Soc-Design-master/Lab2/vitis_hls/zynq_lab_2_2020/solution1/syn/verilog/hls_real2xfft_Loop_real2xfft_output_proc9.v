// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_Loop_real2xfft_output_proc9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dout_V_TREADY,
        windowed_V_0_address0,
        windowed_V_0_ce0,
        windowed_V_0_q0,
        windowed_V_1_address0,
        windowed_V_1_ce0,
        windowed_V_1_q0,
        dout_V_TDATA,
        dout_V_TVALID
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   dout_V_TREADY;
output  [8:0] windowed_V_0_address0;
output   windowed_V_0_ce0;
input  [15:0] windowed_V_0_q0;
output  [8:0] windowed_V_1_address0;
output   windowed_V_1_ce0;
input  [15:0] windowed_V_1_q0;
output  [47:0] dout_V_TDATA;
output   dout_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg windowed_V_0_ce0;
reg windowed_V_1_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_2_fu_133_p3;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    regslice_both_dout_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    dout_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [9:0] i9_reg_83;
wire   [0:0] fft_axis_d_last_V_fu_117_p2;
reg   [0:0] fft_axis_d_last_V_reg_167;
wire   [9:0] trunc_ln77_fu_129_p1;
reg   [9:0] trunc_ln77_reg_172;
reg   [0:0] tmp_2_reg_177;
reg   [0:0] tmp_2_reg_177_pp0_iter1_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [9:0] ap_phi_mux_i9_phi_fu_87_p6;
wire   [63:0] zext_ln79_fu_111_p1;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] lshr_ln_fu_101_p4;
wire   [10:0] i9_cast_fu_97_p1;
wire   [10:0] i_fu_123_p2;
wire   [32:0] tmp_fu_141_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [47:0] dout_V_TDATA_int_regslice;
reg    dout_V_TVALID_int_regslice;
wire    dout_V_TREADY_int_regslice;
wire    regslice_both_dout_V_U_vld_out;
reg    ap_condition_77;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

hls_real2xfft_regslice_both #(
    .DataWidth( 48 ))
regslice_both_dout_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dout_V_TDATA_int_regslice),
    .vld_in(dout_V_TVALID_int_regslice),
    .ack_in(dout_V_TREADY_int_regslice),
    .data_out(dout_V_TDATA),
    .vld_out(regslice_both_dout_V_U_vld_out),
    .ack_out(dout_V_TREADY),
    .apdone_blk(regslice_both_dout_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_2_reg_177_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i9_reg_83 <= trunc_ln77_reg_172;
    end else if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_2_reg_177 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i9_reg_83 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fft_axis_d_last_V_reg_167 <= fft_axis_d_last_V_fu_117_p2;
        tmp_2_reg_177 <= i_fu_123_p2[32'd10];
        tmp_2_reg_177_pp0_iter1_reg <= tmp_2_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln77_reg_172 <= trunc_ln77_fu_129_p1;
    end
end

always @ (*) begin
    if (((tmp_2_reg_177_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_77)) begin
        if ((tmp_2_reg_177 == 1'd1)) begin
            ap_phi_mux_i9_phi_fu_87_p6 = 10'd0;
        end else if ((tmp_2_reg_177 == 1'd0)) begin
            ap_phi_mux_i9_phi_fu_87_p6 = trunc_ln77_reg_172;
        end else begin
            ap_phi_mux_i9_phi_fu_87_p6 = i9_reg_83;
        end
    end else begin
        ap_phi_mux_i9_phi_fu_87_p6 = i9_reg_83;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_2_fu_133_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dout_V_TDATA_blk_n = dout_V_TREADY_int_regslice;
    end else begin
        dout_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dout_V_TVALID_int_regslice = 1'b1;
    end else begin
        dout_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_V_0_ce0 = 1'b1;
    end else begin
        windowed_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        windowed_V_1_ce0 = 1'b1;
    end else begin
        windowed_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_dout_V_U_apdone_blk == 1'b1) | (dout_V_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (dout_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_dout_V_U_apdone_blk == 1'b1) | (dout_V_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (dout_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_dout_V_U_apdone_blk == 1'b1) | (dout_V_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (dout_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (dout_V_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((regslice_both_dout_V_U_apdone_blk == 1'b1) | (dout_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_77 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign dout_V_TDATA_int_regslice = tmp_fu_141_p4;

assign dout_V_TVALID = regslice_both_dout_V_U_vld_out;

assign fft_axis_d_last_V_fu_117_p2 = ((ap_phi_mux_i9_phi_fu_87_p6 == 10'd1022) ? 1'b1 : 1'b0);

assign i9_cast_fu_97_p1 = ap_phi_mux_i9_phi_fu_87_p6;

assign i_fu_123_p2 = (i9_cast_fu_97_p1 + 11'd2);

assign lshr_ln_fu_101_p4 = {{ap_phi_mux_i9_phi_fu_87_p6[9:1]}};

assign tmp_2_fu_133_p3 = i_fu_123_p2[32'd10];

assign tmp_fu_141_p4 = {{{fft_axis_d_last_V_reg_167}, {windowed_V_1_q0}}, {windowed_V_0_q0}};

assign trunc_ln77_fu_129_p1 = i_fu_123_p2[9:0];

assign windowed_V_0_address0 = zext_ln79_fu_111_p1;

assign windowed_V_1_address0 = zext_ln79_fu_111_p1;

assign zext_ln79_fu_111_p1 = lshr_ln_fu_101_p4;

endmodule //hls_real2xfft_Loop_real2xfft_output_proc9
