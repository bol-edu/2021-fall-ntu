// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_output_proc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        delayed_V_dout,
        delayed_V_empty_n,
        delayed_V_read,
        nodelay_V_dout,
        nodelay_V_empty_n,
        nodelay_V_read,
        dout1_address0,
        dout1_ce0,
        dout1_we0,
        dout1_d0,
        dout_address0,
        dout_ce0,
        dout_we0,
        dout_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] delayed_V_dout;
input   delayed_V_empty_n;
output   delayed_V_read;
input  [15:0] nodelay_V_dout;
input   nodelay_V_empty_n;
output   nodelay_V_read;
output  [8:0] dout1_address0;
output   dout1_ce0;
output   dout1_we0;
output  [15:0] dout1_d0;
output  [8:0] dout_address0;
output   dout_ce0;
output   dout_we0;
output  [15:0] dout_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg delayed_V_read;
reg nodelay_V_read;
reg dout1_ce0;
reg dout1_we0;
reg[8:0] dout_address0;
reg dout_ce0;
reg dout_we0;
reg[15:0] dout_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1_fu_145_p3;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] tmp_reg_200;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    nodelay_V_blk_n;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    delayed_V_blk_n;
reg   [9:0] i15_reg_98;
reg   [9:0] i15_reg_98_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_200_pp0_iter1_reg;
reg   [15:0] delayed_V_read_reg_204;
reg   [15:0] nodelay_V_read_reg_209;
wire   [9:0] trunc_ln84_fu_141_p1;
reg   [9:0] trunc_ln84_reg_214;
reg   [0:0] tmp_1_reg_219;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_i15_phi_fu_102_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_dout_val_reg_113;
reg   [15:0] ap_phi_reg_pp0_iter1_dout_val_reg_113;
wire   [63:0] zext_ln93_fu_163_p1;
wire   [63:0] zext_ln93_1_fu_178_p1;
wire   [63:0] zext_ln93_2_fu_193_p1;
wire   [10:0] i15_cast_fu_131_p1;
wire   [10:0] i_fu_135_p2;
wire   [7:0] lshr_ln_fu_153_p4;
wire   [8:0] lshr_ln93_1_fu_168_p4;
wire   [8:0] lshr_ln93_2_fu_183_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_93;
reg    ap_condition_159;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_1_reg_219 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_dout_val_reg_113 <= nodelay_V_dout;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_dout_val_reg_113 <= delayed_V_dout;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_dout_val_reg_113 <= ap_phi_reg_pp0_iter0_dout_val_reg_113;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_reg_219 == 1'd0))) begin
        i15_reg_98 <= trunc_ln84_reg_214;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_reg_219 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i15_reg_98 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_200 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        delayed_V_read_reg_204 <= delayed_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i15_reg_98_pp0_iter1_reg <= i15_reg_98;
        tmp_reg_200 <= ap_phi_mux_i15_phi_fu_102_p6[32'd9];
        tmp_reg_200_pp0_iter1_reg <= tmp_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_200 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        nodelay_V_read_reg_209 <= nodelay_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_1_reg_219 <= i_fu_135_p2[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln84_reg_214 <= trunc_ln84_fu_141_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_1_reg_219 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((tmp_1_reg_219 == 1'd1)) begin
            ap_phi_mux_i15_phi_fu_102_p6 = 10'd0;
        end else if ((tmp_1_reg_219 == 1'd0)) begin
            ap_phi_mux_i15_phi_fu_102_p6 = trunc_ln84_reg_214;
        end else begin
            ap_phi_mux_i15_phi_fu_102_p6 = i15_reg_98;
        end
    end else begin
        ap_phi_mux_i15_phi_fu_102_p6 = i15_reg_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_1_fu_145_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_reg_200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (tmp_reg_200 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        delayed_V_blk_n = delayed_V_empty_n;
    end else begin
        delayed_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_200 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        delayed_V_read = 1'b1;
    end else begin
        delayed_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dout1_ce0 = 1'b1;
    end else begin
        dout1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dout1_we0 = 1'b1;
    end else begin
        dout1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_159)) begin
        if ((tmp_reg_200_pp0_iter1_reg == 1'd1)) begin
            dout_address0 = zext_ln93_1_fu_178_p1;
        end else if ((tmp_reg_200_pp0_iter1_reg == 1'd0)) begin
            dout_address0 = zext_ln93_fu_163_p1;
        end else begin
            dout_address0 = 'bx;
        end
    end else begin
        dout_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_200_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_200_pp0_iter1_reg == 1'd0)))) begin
        dout_ce0 = 1'b1;
    end else begin
        dout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_159)) begin
        if ((tmp_reg_200_pp0_iter1_reg == 1'd1)) begin
            dout_d0 = nodelay_V_read_reg_209;
        end else if ((tmp_reg_200_pp0_iter1_reg == 1'd0)) begin
            dout_d0 = delayed_V_read_reg_204;
        end else begin
            dout_d0 = 'bx;
        end
    end else begin
        dout_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_200_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_200_pp0_iter1_reg == 1'd0)))) begin
        dout_we0 = 1'b1;
    end else begin
        dout_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (tmp_reg_200 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        nodelay_V_blk_n = nodelay_V_empty_n;
    end else begin
        nodelay_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_200 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_200 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        nodelay_V_read = 1'b1;
    end else begin
        nodelay_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((nodelay_V_empty_n == 1'b0) & (tmp_reg_200 == 1'd1)) | ((tmp_reg_200 == 1'd0) & (delayed_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_159 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_93 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_dout_val_reg_113 = 'bx;

assign dout1_address0 = zext_ln93_2_fu_193_p1;

assign dout1_d0 = ap_phi_reg_pp0_iter1_dout_val_reg_113;

assign i15_cast_fu_131_p1 = i15_reg_98;

assign i_fu_135_p2 = (i15_cast_fu_131_p1 + 11'd2);

assign lshr_ln93_1_fu_168_p4 = {{i15_reg_98_pp0_iter1_reg[9:1]}};

assign lshr_ln93_2_fu_183_p4 = {{i15_reg_98_pp0_iter1_reg[9:1]}};

assign lshr_ln_fu_153_p4 = {{i15_reg_98_pp0_iter1_reg[8:1]}};

assign tmp_1_fu_145_p3 = i_fu_135_p2[32'd10];

assign trunc_ln84_fu_141_p1 = i_fu_135_p2[9:0];

assign zext_ln93_1_fu_178_p1 = lshr_ln93_1_fu_168_p4;

assign zext_ln93_2_fu_193_p1 = lshr_ln93_2_fu_183_p4;

assign zext_ln93_fu_163_p1 = lshr_ln_fu_153_p4;

endmodule //hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_output_proc8
