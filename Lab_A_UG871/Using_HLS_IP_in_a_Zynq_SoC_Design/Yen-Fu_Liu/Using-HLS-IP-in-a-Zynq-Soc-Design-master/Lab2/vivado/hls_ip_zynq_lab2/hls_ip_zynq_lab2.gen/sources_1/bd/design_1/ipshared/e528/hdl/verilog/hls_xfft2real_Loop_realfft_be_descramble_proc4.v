// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_xfft2real_Loop_realfft_be_descramble_proc4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        descramble_buf_1_M_real_V_address0,
        descramble_buf_1_M_real_V_ce0,
        descramble_buf_1_M_real_V_q0,
        descramble_buf_1_M_imag_V_address0,
        descramble_buf_1_M_imag_V_ce0,
        descramble_buf_1_M_imag_V_q0,
        real_spectrum_lo_din,
        real_spectrum_lo_full_n,
        real_spectrum_lo_write,
        real_spectrum_hi_buf_M_real_V_address0,
        real_spectrum_hi_buf_M_real_V_ce0,
        real_spectrum_hi_buf_M_real_V_we0,
        real_spectrum_hi_buf_M_real_V_d0,
        real_spectrum_hi_buf_M_imag_V_address0,
        real_spectrum_hi_buf_M_imag_V_ce0,
        real_spectrum_hi_buf_M_imag_V_we0,
        real_spectrum_hi_buf_M_imag_V_d0,
        descramble_buf_0_M_real_V_address0,
        descramble_buf_0_M_real_V_ce0,
        descramble_buf_0_M_real_V_q0,
        descramble_buf_0_M_imag_V_address0,
        descramble_buf_0_M_imag_V_ce0,
        descramble_buf_0_M_imag_V_q0,
        twid_rom_M_real_V_address0,
        twid_rom_M_real_V_ce0,
        twid_rom_M_real_V_q0,
        twid_rom_M_imag_V_address0,
        twid_rom_M_imag_V_ce0,
        twid_rom_M_imag_V_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state12 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [7:0] descramble_buf_1_M_real_V_address0;
output   descramble_buf_1_M_real_V_ce0;
input  [15:0] descramble_buf_1_M_real_V_q0;
output  [7:0] descramble_buf_1_M_imag_V_address0;
output   descramble_buf_1_M_imag_V_ce0;
input  [15:0] descramble_buf_1_M_imag_V_q0;
output  [31:0] real_spectrum_lo_din;
input   real_spectrum_lo_full_n;
output   real_spectrum_lo_write;
output  [7:0] real_spectrum_hi_buf_M_real_V_address0;
output   real_spectrum_hi_buf_M_real_V_ce0;
output   real_spectrum_hi_buf_M_real_V_we0;
output  [15:0] real_spectrum_hi_buf_M_real_V_d0;
output  [7:0] real_spectrum_hi_buf_M_imag_V_address0;
output   real_spectrum_hi_buf_M_imag_V_ce0;
output   real_spectrum_hi_buf_M_imag_V_we0;
output  [15:0] real_spectrum_hi_buf_M_imag_V_d0;
output  [7:0] descramble_buf_0_M_real_V_address0;
output   descramble_buf_0_M_real_V_ce0;
input  [15:0] descramble_buf_0_M_real_V_q0;
output  [7:0] descramble_buf_0_M_imag_V_address0;
output   descramble_buf_0_M_imag_V_ce0;
input  [15:0] descramble_buf_0_M_imag_V_q0;
output  [7:0] twid_rom_M_real_V_address0;
output   twid_rom_M_real_V_ce0;
input  [14:0] twid_rom_M_real_V_q0;
output  [7:0] twid_rom_M_imag_V_address0;
output   twid_rom_M_imag_V_ce0;
input  [15:0] twid_rom_M_imag_V_q0;

reg ap_done;
reg ap_idle;
reg start_write;
reg[7:0] descramble_buf_1_M_real_V_address0;
reg descramble_buf_1_M_real_V_ce0;
reg[7:0] descramble_buf_1_M_imag_V_address0;
reg descramble_buf_1_M_imag_V_ce0;
reg real_spectrum_lo_write;
reg real_spectrum_hi_buf_M_real_V_ce0;
reg real_spectrum_hi_buf_M_real_V_we0;
reg real_spectrum_hi_buf_M_imag_V_ce0;
reg real_spectrum_hi_buf_M_imag_V_we0;
reg descramble_buf_0_M_real_V_ce0;
reg descramble_buf_0_M_imag_V_ce0;
reg twid_rom_M_real_V_ce0;
reg twid_rom_M_imag_V_ce0;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    real_spectrum_lo_blk_n;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln89_reg_849;
reg   [0:0] icmp_ln89_reg_849_pp0_iter7_reg;
reg   [8:0] i_reg_203;
reg   [15:0] descramble_buf_1_M_real_V_load_reg_834;
wire    ap_CS_fsm_state2;
reg   [15:0] descramble_buf_1_M_imag_V_load_reg_839;
wire   [8:0] add_ln89_fu_214_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln89_fu_220_p2;
reg   [0:0] icmp_ln89_reg_849_pp0_iter1_reg;
reg   [0:0] icmp_ln89_reg_849_pp0_iter2_reg;
reg   [0:0] icmp_ln89_reg_849_pp0_iter3_reg;
reg   [0:0] icmp_ln89_reg_849_pp0_iter4_reg;
reg   [0:0] icmp_ln89_reg_849_pp0_iter5_reg;
reg   [0:0] icmp_ln89_reg_849_pp0_iter6_reg;
wire   [63:0] zext_ln89_fu_226_p1;
reg   [63:0] zext_ln89_reg_853;
wire   [0:0] icmp_ln93_fu_231_p2;
reg   [0:0] icmp_ln93_reg_865;
reg   [0:0] icmp_ln93_reg_865_pp0_iter1_reg;
reg   [0:0] icmp_ln93_reg_865_pp0_iter2_reg;
reg   [0:0] icmp_ln93_reg_865_pp0_iter3_reg;
reg   [0:0] icmp_ln93_reg_865_pp0_iter4_reg;
reg   [0:0] icmp_ln93_reg_865_pp0_iter5_reg;
reg   [0:0] icmp_ln93_reg_865_pp0_iter6_reg;
wire   [63:0] zext_ln703_fu_247_p1;
reg   [63:0] zext_ln703_reg_873;
reg   [63:0] zext_ln703_reg_873_pp0_iter1_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter2_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter3_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter4_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter5_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter6_reg;
reg   [63:0] zext_ln703_reg_873_pp0_iter7_reg;
reg  signed [15:0] descramble_buf_0_M_imag_V_load_reg_890;
reg  signed [15:0] descramble_buf_0_M_imag_V_load_reg_890_pp0_iter2_reg;
reg  signed [15:0] descramble_buf_0_M_imag_V_load_reg_890_pp0_iter3_reg;
reg  signed [15:0] descramble_buf_0_M_imag_V_load_reg_890_pp0_iter4_reg;
reg  signed [15:0] descramble_buf_0_M_imag_V_load_reg_890_pp0_iter5_reg;
wire   [15:0] sub_ln703_1_fu_252_p2;
reg   [15:0] sub_ln703_1_reg_897;
reg  signed [15:0] descramble_buf_0_M_real_V_load_reg_917;
reg  signed [15:0] descramble_buf_0_M_real_V_load_reg_917_pp0_iter3_reg;
reg  signed [15:0] descramble_buf_0_M_real_V_load_reg_917_pp0_iter4_reg;
reg  signed [15:0] descramble_buf_0_M_real_V_load_reg_917_pp0_iter5_reg;
wire  signed [16:0] sext_ln1192_1_fu_261_p1;
reg  signed [16:0] sext_ln1192_1_reg_923;
wire  signed [16:0] sext_ln1192_fu_265_p1;
reg  signed [16:0] sext_ln1192_reg_928;
wire   [16:0] ret_V_9_fu_269_p2;
reg   [16:0] ret_V_9_reg_933;
wire   [15:0] f_M_imag_V_fu_330_p3;
reg   [15:0] f_M_imag_V_reg_938;
reg   [15:0] f_M_imag_V_reg_938_pp0_iter3_reg;
reg   [15:0] f_M_imag_V_reg_938_pp0_iter4_reg;
reg   [15:0] f_M_imag_V_reg_938_pp0_iter5_reg;
wire  signed [30:0] sext_ln1118_fu_386_p1;
reg   [0:0] tmp_5_reg_950;
reg   [15:0] trunc_ln1148_3_reg_955;
wire   [30:0] zext_ln1115_fu_408_p1;
reg   [30:0] zext_ln1115_reg_960;
wire  signed [30:0] sext_ln1118_2_fu_412_p1;
reg  signed [30:0] sext_ln1118_2_reg_966;
wire   [15:0] f_M_real_V_fu_460_p3;
reg   [15:0] f_M_real_V_reg_972;
reg   [15:0] f_M_real_V_reg_972_pp0_iter4_reg;
reg   [15:0] f_M_real_V_reg_972_pp0_iter5_reg;
wire  signed [30:0] sext_ln1118_1_fu_495_p1;
wire  signed [30:0] grp_fu_796_p2;
wire  signed [30:0] grp_fu_802_p2;
wire   [15:0] add_ln703_fu_499_p2;
reg   [15:0] add_ln703_reg_994;
wire   [15:0] sub_ln703_fu_503_p2;
reg   [15:0] sub_ln703_reg_999;
wire   [15:0] sub_ln703_2_fu_516_p2;
reg   [15:0] sub_ln703_2_reg_1004;
wire   [15:0] p_r_M_real_V_1_fu_521_p2;
reg   [15:0] p_r_M_real_V_1_reg_1009;
wire   [15:0] sub_ln703_3_fu_535_p2;
reg   [15:0] sub_ln703_3_reg_1014;
wire   [15:0] p_r_M_imag_V_1_fu_540_p2;
reg   [15:0] p_r_M_imag_V_1_reg_1019;
wire   [15:0] select_ln1148_fu_625_p3;
reg   [15:0] select_ln1148_reg_1024;
wire   [15:0] select_ln1148_3_fu_677_p3;
reg   [15:0] select_ln1148_3_reg_1029;
wire   [15:0] select_ln1148_4_fu_729_p3;
reg   [15:0] select_ln1148_4_reg_1034;
wire   [15:0] select_ln1148_5_fu_781_p3;
reg   [15:0] select_ln1148_5_reg_1039;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [7:0] trunc_ln98_fu_237_p1;
wire   [7:0] sub_ln703_4_fu_241_p2;
wire  signed [15:0] sext_ln1192_fu_265_p0;
wire  signed [16:0] sext_ln1192_3_fu_258_p1;
wire  signed [16:0] sext_ln1192_2_fu_275_p1;
wire   [16:0] ret_V_7_fu_284_p2;
wire   [16:0] sub_ln1148_2_fu_298_p2;
wire   [15:0] trunc_ln1148_4_fu_304_p4;
wire   [0:0] tmp_3_fu_290_p3;
wire   [15:0] sub_ln1148_3_fu_324_p2;
wire   [15:0] trunc_ln1148_5_fu_314_p4;
wire   [16:0] ret_V_8_fu_278_p2;
wire   [16:0] r_V_5_fu_338_p2;
wire   [15:0] trunc_ln1148_7_fu_352_p4;
wire   [0:0] tmp_4_fu_344_p3;
wire   [15:0] sub_ln1148_4_fu_362_p2;
wire   [15:0] trunc_ln1148_8_fu_368_p4;
wire   [15:0] g_M_real_V_fu_378_p3;
wire   [16:0] ret_V_6_fu_416_p2;
wire   [16:0] sub_ln1148_fu_428_p2;
wire   [15:0] trunc_ln1148_1_fu_434_p4;
wire   [0:0] tmp_fu_420_p3;
wire   [15:0] sub_ln1148_1_fu_454_p2;
wire   [15:0] trunc_ln1148_2_fu_444_p4;
wire   [16:0] sub_ln1148_5_fu_468_p2;
wire   [15:0] trunc_ln1148_s_fu_473_p4;
wire   [15:0] sub_ln1148_6_fu_483_p2;
wire   [15:0] g_M_imag_V_fu_489_p3;
wire  signed [30:0] grp_fu_816_p3;
wire   [15:0] p_r_V_fu_507_p4;
wire  signed [30:0] grp_fu_808_p3;
wire   [15:0] trunc_ln2_fu_526_p4;
wire  signed [15:0] t_V_7_fu_545_p3;
wire  signed [15:0] t_V_6_fu_550_p3;
wire  signed [15:0] t_V_5_fu_555_p3;
wire  signed [15:0] t_V_4_fu_560_p3;
wire  signed [16:0] sext_ln1148_fu_577_p1;
wire   [16:0] sub_ln1148_7_fu_589_p2;
wire   [14:0] trunc_ln1148_9_fu_605_p4;
wire   [15:0] trunc_ln1148_6_fu_595_p4;
wire   [0:0] tmp_6_fu_581_p3;
wire   [15:0] sub_ln1148_8_fu_619_p2;
wire  signed [15:0] sext_ln1148_1_fu_615_p1;
wire  signed [16:0] sext_ln1148_2_fu_573_p1;
wire   [16:0] sub_ln1148_9_fu_641_p2;
wire   [14:0] trunc_ln1148_11_fu_657_p4;
wire   [15:0] trunc_ln1148_10_fu_647_p4;
wire   [0:0] tmp_7_fu_633_p3;
wire   [15:0] sub_ln1148_10_fu_671_p2;
wire  signed [15:0] sext_ln1148_3_fu_667_p1;
wire  signed [16:0] sext_ln1148_4_fu_569_p1;
wire   [16:0] sub_ln1148_11_fu_693_p2;
wire   [14:0] trunc_ln1148_13_fu_709_p4;
wire   [15:0] trunc_ln1148_12_fu_699_p4;
wire   [0:0] tmp_8_fu_685_p3;
wire   [15:0] sub_ln1148_12_fu_723_p2;
wire  signed [15:0] sext_ln1148_5_fu_719_p1;
wire  signed [16:0] sext_ln1148_6_fu_565_p1;
wire   [16:0] sub_ln1148_13_fu_745_p2;
wire   [14:0] trunc_ln1148_15_fu_761_p4;
wire   [15:0] trunc_ln1148_14_fu_751_p4;
wire   [0:0] tmp_9_fu_737_p3;
wire   [15:0] sub_ln1148_14_fu_775_p2;
wire  signed [15:0] sext_ln1148_7_fu_771_p1;
wire  signed [15:0] grp_fu_796_p0;
wire   [14:0] grp_fu_796_p1;
wire  signed [15:0] grp_fu_802_p1;
wire  signed [15:0] grp_fu_808_p0;
wire   [14:0] grp_fu_808_p1;
wire  signed [15:0] grp_fu_816_p0;
wire  signed [15:0] grp_fu_816_p1;
reg    grp_fu_796_ce;
reg    grp_fu_802_ce;
reg    grp_fu_808_ce;
reg    grp_fu_816_ce;
wire    ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [30:0] grp_fu_796_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

hls_xfft2real_mul_mul_16s_15ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
mul_mul_16s_15ns_31_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_796_p0),
    .din1(grp_fu_796_p1),
    .ce(grp_fu_796_ce),
    .dout(grp_fu_796_p2)
);

hls_xfft2real_mul_mul_16s_16s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_mul_16s_16s_31_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(twid_rom_M_imag_V_q0),
    .din1(grp_fu_802_p1),
    .ce(grp_fu_802_ce),
    .dout(grp_fu_802_p2)
);

hls_xfft2real_mac_muladd_16s_15ns_31s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_15ns_31s_31_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_808_p0),
    .din1(grp_fu_808_p1),
    .din2(grp_fu_802_p2),
    .ce(grp_fu_808_ce),
    .dout(grp_fu_808_p3)
);

hls_xfft2real_mac_mulsub_16s_16s_31s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_mulsub_16s_16s_31s_31_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_816_p0),
    .din1(grp_fu_816_p1),
    .din2(grp_fu_796_p2),
    .ce(grp_fu_816_ce),
    .dout(grp_fu_816_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_203 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_220_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_203 <= add_ln89_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_865_pp0_iter5_reg == 1'd1) & (icmp_ln89_reg_849_pp0_iter5_reg == 1'd0))) begin
        add_ln703_reg_994 <= add_ln703_fu_499_p2;
        sub_ln703_reg_999 <= sub_ln703_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_849 == 1'd0))) begin
        descramble_buf_0_M_imag_V_load_reg_890 <= descramble_buf_0_M_imag_V_q0;
        sub_ln703_1_reg_897 <= sub_ln703_1_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        descramble_buf_0_M_imag_V_load_reg_890_pp0_iter2_reg <= descramble_buf_0_M_imag_V_load_reg_890;
        descramble_buf_0_M_imag_V_load_reg_890_pp0_iter3_reg <= descramble_buf_0_M_imag_V_load_reg_890_pp0_iter2_reg;
        descramble_buf_0_M_imag_V_load_reg_890_pp0_iter4_reg <= descramble_buf_0_M_imag_V_load_reg_890_pp0_iter3_reg;
        descramble_buf_0_M_imag_V_load_reg_890_pp0_iter5_reg <= descramble_buf_0_M_imag_V_load_reg_890_pp0_iter4_reg;
        descramble_buf_0_M_real_V_load_reg_917_pp0_iter3_reg <= descramble_buf_0_M_real_V_load_reg_917;
        descramble_buf_0_M_real_V_load_reg_917_pp0_iter4_reg <= descramble_buf_0_M_real_V_load_reg_917_pp0_iter3_reg;
        descramble_buf_0_M_real_V_load_reg_917_pp0_iter5_reg <= descramble_buf_0_M_real_V_load_reg_917_pp0_iter4_reg;
        f_M_imag_V_reg_938_pp0_iter3_reg <= f_M_imag_V_reg_938;
        f_M_imag_V_reg_938_pp0_iter4_reg <= f_M_imag_V_reg_938_pp0_iter3_reg;
        f_M_imag_V_reg_938_pp0_iter5_reg <= f_M_imag_V_reg_938_pp0_iter4_reg;
        f_M_real_V_reg_972_pp0_iter4_reg <= f_M_real_V_reg_972;
        f_M_real_V_reg_972_pp0_iter5_reg <= f_M_real_V_reg_972_pp0_iter4_reg;
        icmp_ln89_reg_849_pp0_iter2_reg <= icmp_ln89_reg_849_pp0_iter1_reg;
        icmp_ln89_reg_849_pp0_iter3_reg <= icmp_ln89_reg_849_pp0_iter2_reg;
        icmp_ln89_reg_849_pp0_iter4_reg <= icmp_ln89_reg_849_pp0_iter3_reg;
        icmp_ln89_reg_849_pp0_iter5_reg <= icmp_ln89_reg_849_pp0_iter4_reg;
        icmp_ln89_reg_849_pp0_iter6_reg <= icmp_ln89_reg_849_pp0_iter5_reg;
        icmp_ln89_reg_849_pp0_iter7_reg <= icmp_ln89_reg_849_pp0_iter6_reg;
        icmp_ln93_reg_865_pp0_iter2_reg <= icmp_ln93_reg_865_pp0_iter1_reg;
        icmp_ln93_reg_865_pp0_iter3_reg <= icmp_ln93_reg_865_pp0_iter2_reg;
        icmp_ln93_reg_865_pp0_iter4_reg <= icmp_ln93_reg_865_pp0_iter3_reg;
        icmp_ln93_reg_865_pp0_iter5_reg <= icmp_ln93_reg_865_pp0_iter4_reg;
        icmp_ln93_reg_865_pp0_iter6_reg <= icmp_ln93_reg_865_pp0_iter5_reg;
        zext_ln703_reg_873_pp0_iter2_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter1_reg[7 : 0];
        zext_ln703_reg_873_pp0_iter3_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter2_reg[7 : 0];
        zext_ln703_reg_873_pp0_iter4_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter3_reg[7 : 0];
        zext_ln703_reg_873_pp0_iter5_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter4_reg[7 : 0];
        zext_ln703_reg_873_pp0_iter6_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter5_reg[7 : 0];
        zext_ln703_reg_873_pp0_iter7_reg[7 : 0] <= zext_ln703_reg_873_pp0_iter6_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_reg_849_pp0_iter1_reg == 1'd0))) begin
        descramble_buf_0_M_real_V_load_reg_917 <= descramble_buf_0_M_real_V_q0;
        f_M_imag_V_reg_938 <= f_M_imag_V_fu_330_p3;
        ret_V_9_reg_933 <= ret_V_9_fu_269_p2;
        sext_ln1118_2_reg_966 <= sext_ln1118_2_fu_412_p1;
        sext_ln1192_1_reg_923 <= sext_ln1192_1_fu_261_p1;
        sext_ln1192_reg_928 <= sext_ln1192_fu_265_p1;
        tmp_5_reg_950 <= ret_V_9_fu_269_p2[32'd16];
        trunc_ln1148_3_reg_955 <= {{ret_V_9_fu_269_p2[16:1]}};
        zext_ln1115_reg_960[14 : 0] <= zext_ln1115_fu_408_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        descramble_buf_1_M_imag_V_load_reg_839 <= descramble_buf_1_M_imag_V_q0;
        descramble_buf_1_M_real_V_load_reg_834 <= descramble_buf_1_M_real_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_reg_849_pp0_iter2_reg == 1'd0))) begin
        f_M_real_V_reg_972 <= f_M_real_V_fu_460_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln89_reg_849 <= icmp_ln89_fu_220_p2;
        icmp_ln89_reg_849_pp0_iter1_reg <= icmp_ln89_reg_849;
        icmp_ln93_reg_865_pp0_iter1_reg <= icmp_ln93_reg_865;
        zext_ln703_reg_873_pp0_iter1_reg[7 : 0] <= zext_ln703_reg_873[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_220_p2 == 1'd0))) begin
        icmp_ln93_reg_865 <= icmp_ln93_fu_231_p2;
        zext_ln703_reg_873[7 : 0] <= zext_ln703_fu_247_p1[7 : 0];
        zext_ln89_reg_853[8 : 0] <= zext_ln89_fu_226_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln93_reg_865_pp0_iter5_reg == 1'd0) & (icmp_ln89_reg_849_pp0_iter5_reg == 1'd0))) begin
        p_r_M_imag_V_1_reg_1019 <= p_r_M_imag_V_1_fu_540_p2;
        p_r_M_real_V_1_reg_1009 <= p_r_M_real_V_1_fu_521_p2;
        sub_ln703_2_reg_1004 <= sub_ln703_2_fu_516_p2;
        sub_ln703_3_reg_1014 <= sub_ln703_3_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_reg_849_pp0_iter6_reg == 1'd0))) begin
        select_ln1148_3_reg_1029 <= select_ln1148_3_fu_677_p3;
        select_ln1148_4_reg_1034 <= select_ln1148_4_fu_729_p3;
        select_ln1148_5_reg_1039 <= select_ln1148_5_fu_781_p3;
        select_ln1148_reg_1024 <= select_ln1148_fu_625_p3;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        descramble_buf_0_M_imag_V_ce0 = 1'b1;
    end else begin
        descramble_buf_0_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        descramble_buf_0_M_real_V_ce0 = 1'b1;
    end else begin
        descramble_buf_0_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        descramble_buf_1_M_imag_V_address0 = zext_ln703_fu_247_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        descramble_buf_1_M_imag_V_address0 = 64'd0;
    end else begin
        descramble_buf_1_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        descramble_buf_1_M_imag_V_ce0 = 1'b1;
    end else begin
        descramble_buf_1_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        descramble_buf_1_M_real_V_address0 = zext_ln703_reg_873;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        descramble_buf_1_M_real_V_address0 = 64'd0;
    end else begin
        descramble_buf_1_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        descramble_buf_1_M_real_V_ce0 = 1'b1;
    end else begin
        descramble_buf_1_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_796_ce = 1'b1;
    end else begin
        grp_fu_796_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_802_ce = 1'b1;
    end else begin
        grp_fu_802_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_808_ce = 1'b1;
    end else begin
        grp_fu_808_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_816_ce = 1'b1;
    end else begin
        grp_fu_816_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        real_spectrum_hi_buf_M_imag_V_ce0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0))) begin
        real_spectrum_hi_buf_M_imag_V_we0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        real_spectrum_hi_buf_M_real_V_ce0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0))) begin
        real_spectrum_hi_buf_M_real_V_we0 = 1'b1;
    end else begin
        real_spectrum_hi_buf_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0))) begin
        real_spectrum_lo_blk_n = real_spectrum_lo_full_n;
    end else begin
        real_spectrum_lo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0))) begin
        real_spectrum_lo_write = 1'b1;
    end else begin
        real_spectrum_lo_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        twid_rom_M_imag_V_ce0 = 1'b1;
    end else begin
        twid_rom_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        twid_rom_M_real_V_ce0 = 1'b1;
    end else begin
        twid_rom_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln89_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln89_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_fu_499_p2 = ($signed(descramble_buf_0_M_imag_V_load_reg_890_pp0_iter5_reg) + $signed(descramble_buf_0_M_real_V_load_reg_917_pp0_iter5_reg));

assign add_ln89_fu_214_p2 = (i_reg_203 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (real_spectrum_lo_full_n == 1'b0) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (real_spectrum_lo_full_n == 1'b0) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter8 == 1'b1) & (real_spectrum_lo_full_n == 1'b0) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter8 = ((real_spectrum_lo_full_n == 1'b0) & (icmp_ln89_reg_849_pp0_iter7_reg == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign descramble_buf_0_M_imag_V_address0 = zext_ln89_fu_226_p1;

assign descramble_buf_0_M_real_V_address0 = zext_ln89_reg_853;

assign f_M_imag_V_fu_330_p3 = ((tmp_3_fu_290_p3[0:0] == 1'b1) ? sub_ln1148_3_fu_324_p2 : trunc_ln1148_5_fu_314_p4);

assign f_M_real_V_fu_460_p3 = ((tmp_fu_420_p3[0:0] == 1'b1) ? sub_ln1148_1_fu_454_p2 : trunc_ln1148_2_fu_444_p4);

assign g_M_imag_V_fu_489_p3 = ((tmp_5_reg_950[0:0] == 1'b1) ? sub_ln1148_6_fu_483_p2 : trunc_ln1148_3_reg_955);

assign g_M_real_V_fu_378_p3 = ((tmp_4_fu_344_p3[0:0] == 1'b1) ? sub_ln1148_4_fu_362_p2 : trunc_ln1148_8_fu_368_p4);

assign grp_fu_796_p0 = sext_ln1118_fu_386_p1;

assign grp_fu_796_p1 = grp_fu_796_p10;

assign grp_fu_796_p10 = twid_rom_M_real_V_q0;

assign grp_fu_802_p1 = sext_ln1118_fu_386_p1;

assign grp_fu_808_p0 = sext_ln1118_1_fu_495_p1;

assign grp_fu_808_p1 = zext_ln1115_reg_960;

assign grp_fu_816_p0 = sext_ln1118_2_reg_966;

assign grp_fu_816_p1 = sext_ln1118_1_fu_495_p1;

assign icmp_ln89_fu_220_p2 = ((i_reg_203 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_231_p2 = ((i_reg_203 == 9'd0) ? 1'b1 : 1'b0);

assign p_r_M_imag_V_1_fu_540_p2 = (trunc_ln2_fu_526_p4 + f_M_imag_V_reg_938_pp0_iter5_reg);

assign p_r_M_real_V_1_fu_521_p2 = (p_r_V_fu_507_p4 + f_M_real_V_reg_972_pp0_iter5_reg);

assign p_r_V_fu_507_p4 = {{grp_fu_816_p3[30:15]}};

assign r_V_5_fu_338_p2 = (17'd0 - ret_V_8_fu_278_p2);

assign real_spectrum_hi_buf_M_imag_V_address0 = zext_ln703_reg_873_pp0_iter7_reg;

assign real_spectrum_hi_buf_M_imag_V_d0 = select_ln1148_5_reg_1039;

assign real_spectrum_hi_buf_M_real_V_address0 = zext_ln703_reg_873_pp0_iter7_reg;

assign real_spectrum_hi_buf_M_real_V_d0 = select_ln1148_4_reg_1034;

assign real_spectrum_lo_din = {{select_ln1148_3_reg_1029}, {select_ln1148_reg_1024}};

assign ret_V_6_fu_416_p2 = ($signed(sext_ln1192_1_reg_923) + $signed(sext_ln1192_reg_928));

assign ret_V_7_fu_284_p2 = ($signed(sext_ln1192_3_fu_258_p1) + $signed(sext_ln1192_2_fu_275_p1));

assign ret_V_8_fu_278_p2 = ($signed(sext_ln1192_3_fu_258_p1) - $signed(sext_ln1192_2_fu_275_p1));

assign ret_V_9_fu_269_p2 = ($signed(sext_ln1192_1_fu_261_p1) - $signed(sext_ln1192_fu_265_p1));

assign select_ln1148_3_fu_677_p3 = ((tmp_7_fu_633_p3[0:0] == 1'b1) ? sub_ln1148_10_fu_671_p2 : sext_ln1148_3_fu_667_p1);

assign select_ln1148_4_fu_729_p3 = ((tmp_8_fu_685_p3[0:0] == 1'b1) ? sub_ln1148_12_fu_723_p2 : sext_ln1148_5_fu_719_p1);

assign select_ln1148_5_fu_781_p3 = ((tmp_9_fu_737_p3[0:0] == 1'b1) ? sub_ln1148_14_fu_775_p2 : sext_ln1148_7_fu_771_p1);

assign select_ln1148_fu_625_p3 = ((tmp_6_fu_581_p3[0:0] == 1'b1) ? sub_ln1148_8_fu_619_p2 : sext_ln1148_1_fu_615_p1);

assign sext_ln1118_1_fu_495_p1 = $signed(g_M_imag_V_fu_489_p3);

assign sext_ln1118_2_fu_412_p1 = $signed(twid_rom_M_imag_V_q0);

assign sext_ln1118_fu_386_p1 = $signed(g_M_real_V_fu_378_p3);

assign sext_ln1148_1_fu_615_p1 = $signed(trunc_ln1148_9_fu_605_p4);

assign sext_ln1148_2_fu_573_p1 = t_V_5_fu_555_p3;

assign sext_ln1148_3_fu_667_p1 = $signed(trunc_ln1148_11_fu_657_p4);

assign sext_ln1148_4_fu_569_p1 = t_V_6_fu_550_p3;

assign sext_ln1148_5_fu_719_p1 = $signed(trunc_ln1148_13_fu_709_p4);

assign sext_ln1148_6_fu_565_p1 = t_V_7_fu_545_p3;

assign sext_ln1148_7_fu_771_p1 = $signed(trunc_ln1148_15_fu_761_p4);

assign sext_ln1148_fu_577_p1 = t_V_4_fu_560_p3;

assign sext_ln1192_1_fu_261_p1 = $signed(descramble_buf_1_M_real_V_q0);

assign sext_ln1192_2_fu_275_p1 = descramble_buf_0_M_imag_V_load_reg_890;

assign sext_ln1192_3_fu_258_p1 = $signed(sub_ln703_1_reg_897);

assign sext_ln1192_fu_265_p0 = descramble_buf_0_M_real_V_q0;

assign sext_ln1192_fu_265_p1 = sext_ln1192_fu_265_p0;

assign start_out = real_start;

assign sub_ln1148_10_fu_671_p2 = (16'd0 - trunc_ln1148_10_fu_647_p4);

assign sub_ln1148_11_fu_693_p2 = ($signed(17'd0) - $signed(sext_ln1148_4_fu_569_p1));

assign sub_ln1148_12_fu_723_p2 = (16'd0 - trunc_ln1148_12_fu_699_p4);

assign sub_ln1148_13_fu_745_p2 = ($signed(17'd0) - $signed(sext_ln1148_6_fu_565_p1));

assign sub_ln1148_14_fu_775_p2 = (16'd0 - trunc_ln1148_14_fu_751_p4);

assign sub_ln1148_1_fu_454_p2 = (16'd0 - trunc_ln1148_1_fu_434_p4);

assign sub_ln1148_2_fu_298_p2 = (17'd0 - ret_V_7_fu_284_p2);

assign sub_ln1148_3_fu_324_p2 = (16'd0 - trunc_ln1148_4_fu_304_p4);

assign sub_ln1148_4_fu_362_p2 = (16'd0 - trunc_ln1148_7_fu_352_p4);

assign sub_ln1148_5_fu_468_p2 = (17'd0 - ret_V_9_reg_933);

assign sub_ln1148_6_fu_483_p2 = (16'd0 - trunc_ln1148_s_fu_473_p4);

assign sub_ln1148_7_fu_589_p2 = ($signed(17'd0) - $signed(sext_ln1148_fu_577_p1));

assign sub_ln1148_8_fu_619_p2 = (16'd0 - trunc_ln1148_6_fu_595_p4);

assign sub_ln1148_9_fu_641_p2 = ($signed(17'd0) - $signed(sext_ln1148_2_fu_573_p1));

assign sub_ln1148_fu_428_p2 = (17'd0 - ret_V_6_fu_416_p2);

assign sub_ln703_1_fu_252_p2 = (16'd0 - descramble_buf_1_M_imag_V_q0);

assign sub_ln703_2_fu_516_p2 = (f_M_real_V_reg_972_pp0_iter5_reg - p_r_V_fu_507_p4);

assign sub_ln703_3_fu_535_p2 = (trunc_ln2_fu_526_p4 - f_M_imag_V_reg_938_pp0_iter5_reg);

assign sub_ln703_4_fu_241_p2 = (8'd0 - trunc_ln98_fu_237_p1);

assign sub_ln703_fu_503_p2 = ($signed(descramble_buf_0_M_real_V_load_reg_917_pp0_iter5_reg) - $signed(descramble_buf_0_M_imag_V_load_reg_890_pp0_iter5_reg));

assign t_V_4_fu_560_p3 = ((icmp_ln93_reg_865_pp0_iter6_reg[0:0] == 1'b1) ? add_ln703_reg_994 : p_r_M_real_V_1_reg_1009);

assign t_V_5_fu_555_p3 = ((icmp_ln93_reg_865_pp0_iter6_reg[0:0] == 1'b1) ? sub_ln703_reg_999 : p_r_M_imag_V_1_reg_1019);

assign t_V_6_fu_550_p3 = ((icmp_ln93_reg_865_pp0_iter6_reg[0:0] == 1'b1) ? descramble_buf_1_M_real_V_load_reg_834 : sub_ln703_2_reg_1004);

assign t_V_7_fu_545_p3 = ((icmp_ln93_reg_865_pp0_iter6_reg[0:0] == 1'b1) ? descramble_buf_1_M_imag_V_load_reg_839 : sub_ln703_3_reg_1014);

assign tmp_3_fu_290_p3 = ret_V_7_fu_284_p2[32'd16];

assign tmp_4_fu_344_p3 = r_V_5_fu_338_p2[32'd16];

assign tmp_6_fu_581_p3 = t_V_4_fu_560_p3[32'd15];

assign tmp_7_fu_633_p3 = t_V_5_fu_555_p3[32'd15];

assign tmp_8_fu_685_p3 = t_V_6_fu_550_p3[32'd15];

assign tmp_9_fu_737_p3 = t_V_7_fu_545_p3[32'd15];

assign tmp_fu_420_p3 = ret_V_6_fu_416_p2[32'd16];

assign trunc_ln1148_10_fu_647_p4 = {{sub_ln1148_9_fu_641_p2[16:1]}};

assign trunc_ln1148_11_fu_657_p4 = {{t_V_5_fu_555_p3[15:1]}};

assign trunc_ln1148_12_fu_699_p4 = {{sub_ln1148_11_fu_693_p2[16:1]}};

assign trunc_ln1148_13_fu_709_p4 = {{t_V_6_fu_550_p3[15:1]}};

assign trunc_ln1148_14_fu_751_p4 = {{sub_ln1148_13_fu_745_p2[16:1]}};

assign trunc_ln1148_15_fu_761_p4 = {{t_V_7_fu_545_p3[15:1]}};

assign trunc_ln1148_1_fu_434_p4 = {{sub_ln1148_fu_428_p2[16:1]}};

assign trunc_ln1148_2_fu_444_p4 = {{ret_V_6_fu_416_p2[16:1]}};

assign trunc_ln1148_4_fu_304_p4 = {{sub_ln1148_2_fu_298_p2[16:1]}};

assign trunc_ln1148_5_fu_314_p4 = {{ret_V_7_fu_284_p2[16:1]}};

assign trunc_ln1148_6_fu_595_p4 = {{sub_ln1148_7_fu_589_p2[16:1]}};

assign trunc_ln1148_7_fu_352_p4 = {{ret_V_8_fu_278_p2[16:1]}};

assign trunc_ln1148_8_fu_368_p4 = {{r_V_5_fu_338_p2[16:1]}};

assign trunc_ln1148_9_fu_605_p4 = {{t_V_4_fu_560_p3[15:1]}};

assign trunc_ln1148_s_fu_473_p4 = {{sub_ln1148_5_fu_468_p2[16:1]}};

assign trunc_ln2_fu_526_p4 = {{grp_fu_808_p3[30:15]}};

assign trunc_ln98_fu_237_p1 = i_reg_203[7:0];

assign twid_rom_M_imag_V_address0 = zext_ln89_reg_853;

assign twid_rom_M_real_V_address0 = zext_ln89_reg_853;

assign zext_ln1115_fu_408_p1 = twid_rom_M_real_V_q0;

assign zext_ln703_fu_247_p1 = sub_ln703_4_fu_241_p2;

assign zext_ln89_fu_226_p1 = i_reg_203;

always @ (posedge ap_clk) begin
    zext_ln89_reg_853[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln703_reg_873_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln1115_reg_960[30:15] <= 16'b0000000000000000;
end

endmodule //hls_xfft2real_Loop_realfft_be_descramble_proc4
