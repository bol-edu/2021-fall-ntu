// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_delay_proc7 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        din_V_TDATA,
        din_V_TVALID,
        din_V_TREADY,
        nodelay_V_din,
        nodelay_V_full_n,
        nodelay_V_write,
        delayed_V_din,
        delayed_V_full_n,
        delayed_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] din_V_TDATA;
input   din_V_TVALID;
output   din_V_TREADY;
output  [15:0] nodelay_V_din;
input   nodelay_V_full_n;
output   nodelay_V_write;
output  [15:0] delayed_V_din;
input   delayed_V_full_n;
output   delayed_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg din_V_TREADY;
reg nodelay_V_write;
reg delayed_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    delay_line_Array_ce0;
reg    delay_line_Array_we0;
wire   [15:0] delay_line_Array_q0;
reg    din_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    nodelay_V_blk_n;
reg    delayed_V_blk_n;
wire   [8:0] i_fu_83_p2;
reg    ap_block_state2;
reg   [8:0] i3_reg_69;
reg    ap_block_state1;
wire   [0:0] icmp_ln76_fu_100_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_delay_proc7_delbkb #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
delay_line_Array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(9'd511),
    .ce0(delay_line_Array_ce0),
    .we0(delay_line_Array_we0),
    .d0(din_V_TDATA),
    .q0(delay_line_Array_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln76_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln76_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i3_reg_69 <= i_fu_83_p2;
    end else if (((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln76_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i3_reg_69 <= 9'd0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln76_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        delay_line_Array_ce0 = 1'd1;
    end else begin
        delay_line_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        delay_line_Array_we0 = 1'd1;
    end else begin
        delay_line_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        delayed_V_blk_n = delayed_V_full_n;
    end else begin
        delayed_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        delayed_V_write = 1'b1;
    end else begin
        delayed_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        din_V_TDATA_blk_n = din_V_TVALID;
    end else begin
        din_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        din_V_TREADY = 1'b1;
    end else begin
        din_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln76_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        nodelay_V_blk_n = nodelay_V_full_n;
    end else begin
        nodelay_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        nodelay_V_write = 1'b1;
    end else begin
        nodelay_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((real_start == 1'b0) | (delayed_V_full_n == 1'b0) | (nodelay_V_full_n == 1'b0) | (din_V_TVALID == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign delayed_V_din = delay_line_Array_q0;

assign i_fu_83_p2 = (i3_reg_69 + 9'd1);

assign icmp_ln76_fu_100_p2 = ((i3_reg_69 == 9'd511) ? 1'b1 : 1'b0);

assign nodelay_V_din = din_V_TDATA;

assign start_out = real_start;

endmodule //hls_real2xfft_sliding_win_1in2out_ap_fixed_16_1_5_3_0_1024_Loop_sliding_win_delay_proc7
